"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è –∑–∞–∫–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤.
–ö–∞—Ç–∞–ª–æ–≥, –∫–æ—Ä–∑–∏–Ω–∞, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from config import (
    FLOWERS_CATEGORY, FLOWERS_ITEM, FLOWERS_CART, FLOWERS_DELIVERY_TYPE,
    FLOWERS_ADDRESS, FLOWERS_TIME, FLOWERS_ANONYMOUS, FLOWERS_CARD,
    FLOWERS_RECIPIENT, FLOWERS_PAYMENT, FLOWERS_CONFIRM,
    FREE_DELIVERY_THRESHOLD, DELIVERY_COST, BONUS_PERCENT, MAX_BONUS_PAYMENT_PERCENT, BONUS_THRESHOLD
)
from database import (
    get_user, get_addresses, add_address, get_bonus_balance, subtract_bonus_points, add_bonus_points,
    get_products, get_product_by_id, get_product_categories, add_flower_order,
    schedule_feedback_request, check_and_award_referral_bonus, update_utm_campaign_stats
)
import json
from utils.helpers import format_price, get_current_datetime, calculate_delivery_cost, generate_order_number, send_to_user_topic
from utils.pricing import calculate_cart_total, format_price_summary, get_subscription_benefits_summary

logger = logging.getLogger(__name__)


# =================================================================
# –®–ê–ì 1: –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò –¢–û–í–ê–†–û–í
# =================================================================

async def flowers_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∑–∞–∫–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤ - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    query = update.callback_query
    await query.answer()

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if 'cart' not in context.user_data:
        context.user_data['cart'] = []

    try:
        # –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        categories = get_product_categories()

        if not categories:
            await query.edit_message_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            )
            return ConversationHandler.END

        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = []
        for category in categories:
            keyboard.append([InlineKeyboardButton(
                category,
                callback_data=f"flowers_cat_{category}"
            )])

        # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        keyboard.append([InlineKeyboardButton("üé® –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑", callback_data="custom_flower_order")])

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–≤–∞—Ä—ã
        cart = context.user_data.get('cart', [])
        if cart:
            cart_count = sum(item['quantity'] for item in cart)
            keyboard.append([InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})", callback_data="view_cart")])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

        await query.edit_message_text(
            "üíê –¶–í–ï–¢–û–ß–ù–´–ô –ú–ê–ì–ê–ó–ò–ù\n\n"
            "–†–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ! üåô\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        return FLOWERS_CATEGORY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ flowers_start: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return ConversationHandler.END


# =================================================================
# –®–ê–ì 2: –ü–†–û–°–ú–û–¢–† –¢–û–í–ê–†–û–í –ò –î–û–ë–ê–í–õ–ï–ù–ò–ï –í –ö–û–†–ó–ò–ù–£
# =================================================================

async def flowers_select_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    query = update.callback_query
    await query.answer()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ—Ä–∑–∏–Ω—ã
    if query.data == "view_cart":
        return await flowers_view_cart(update, context)

    # –ò–∑–≤–ª–µ—á—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    category = query.data.replace("flowers_cat_", "")
    context.user_data['current_category'] = category

    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        products = get_products(category=category, active_only=True, in_stock_only=True)

        if not products:
            await query.edit_message_text(
                f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="flowers_shop")
                ]])
            )
            return FLOWERS_CATEGORY

        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        keyboard = []
        for product in products[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            keyboard.append([
                InlineKeyboardButton(f"{product['name']} - {format_price(product['price'])}", callback_data=f"view_flower_{product['id']}"),
                InlineKeyboardButton("‚ûï", callback_data=f"add_flower_{product['id']}")
            ])

        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
        cart = context.user_data.get('cart', [])
        if cart:
            cart_count = sum(item['quantity'] for item in cart)
            keyboard.append([InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})", callback_data="view_cart")])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="flowers_shop")])

        await query.edit_message_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        return FLOWERS_ITEM

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ flowers_select_category: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return ConversationHandler.END


async def flowers_view_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞"""

    query = update.callback_query
    await query.answer()

    product_id = int(query.data.replace("view_flower_", ""))

    try:
        product = get_product_by_id(product_id)

        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return FLOWERS_ITEM

        text = (
            f"üåπ {product['name']}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {format_price(product['price'])}\n\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{product.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}"
        )

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ—Ä–∑–∏–Ω—É", callback_data=f"add_flower_{product_id}")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–∞–ª–æ–≥—É", callback_data=f"flowers_cat_{product['category']}")]
        ]

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å
        if product.get('photo_url'):
            try:
                await query.message.reply_photo(
                    photo=product['photo_url'],
                    caption=text,
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
                await query.message.delete()
            except:
                await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        else:
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

        return FLOWERS_ITEM

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ flowers_view_item: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–≤–∞—Ä–∞", show_alert=True)
        return FLOWERS_ITEM


async def flowers_add_to_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω—É"""

    query = update.callback_query

    product_id = int(query.data.replace("add_flower_", ""))

    try:
        product = get_product_by_id(product_id)

        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return FLOWERS_ITEM

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É
        if 'cart' not in context.user_data:
            context.user_data['cart'] = []

        cart = context.user_data['cart']

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
        existing_item = next((item for item in cart if item['id'] == product_id), None)

        if existing_item:
            existing_item['quantity'] += 1
            await query.answer(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤ –∫–æ—Ä–∑–∏–Ω–µ: {existing_item['quantity']} —à—Ç.")
        else:
            cart.append({
                'id': product_id,
                'name': product['name'],
                'price': product['price'],
                'quantity': 1,
                'photo_url': product.get('photo_url', ''),
                'category': product['category']
            })
            await query.answer("‚úÖ –¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–æ—Ä–∑–∏–Ω—É!")

        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∫–∞—Ç–∞–ª–æ–≥—É —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–æ–π
        category = context.user_data.get('current_category')
        if category:
            return await flowers_select_category_update(update, context, category)
        else:
            return FLOWERS_ITEM

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ flowers_add_to_cart: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É", show_alert=True)
        return FLOWERS_ITEM


async def flowers_select_category_update(update, context, category):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Å—á–µ—Ç—á–∏–∫–æ–º –∫–æ—Ä–∑–∏–Ω—ã"""

    query = update.callback_query

    try:
        products = get_products(category=category, active_only=True, in_stock_only=True)

        keyboard = []
        for product in products[:10]:
            keyboard.append([
                InlineKeyboardButton(f"{product['name']} - {format_price(product['price'])}", callback_data=f"view_flower_{product['id']}"),
                InlineKeyboardButton("‚ûï", callback_data=f"add_flower_{product['id']}")
            ])

        cart = context.user_data.get('cart', [])
        cart_count = sum(item['quantity'] for item in cart)
        keyboard.append([InlineKeyboardButton(f"üõí –ö–æ—Ä–∑–∏–Ω–∞ ({cart_count})", callback_data="view_cart")])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="flowers_shop")])

        await query.edit_message_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        return FLOWERS_ITEM

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ flowers_select_category_update: {e}")
        return FLOWERS_ITEM


# =================================================================
# –®–ê–ì 3: –ö–û–†–ó–ò–ù–ê - –£–ü–†–ê–í–õ–ï–ù–ò–ï –¢–û–í–ê–†–ê–ú–ò
# =================================================================

async def flowers_view_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∏–∑–º–µ–Ω–µ–Ω–∏—è"""

    query = update.callback_query
    await query.answer()

    cart = context.user_data.get('cart', [])

    if not cart:
        await query.edit_message_text(
            "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="flowers_shop")
            ]])
        )
        return FLOWERS_CATEGORY

    # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å –∏—Ç–æ–≥–∏ —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
    user_id = update.effective_user.id
    cart_items = [{'price': item['price'], 'quantity': item['quantity'], 'type': 'flower', 'name': item['name']} for item in cart]
    base_subtotal = sum(item['price'] * item['quantity'] for item in cart)
    delivery = calculate_delivery_cost(base_subtotal)
    pricing_info = calculate_cart_total(user_id, cart_items, delivery)

    # –°–æ–∑–¥–∞—Ç—å —Ç–µ–∫—Å—Ç –∫–æ—Ä–∑–∏–Ω—ã
    text = "üõí –í–ê–®–ê –ö–û–†–ó–ò–ù–ê:\n\n"

    keyboard = []
    for i, item_discount in enumerate(pricing_info['items_with_discount']):
        # –ù–∞–π—Ç–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä–∑–∏–Ω—ã –¥–ª—è ID
        original_item = cart[i]

        item_total = item_discount['final_price'] * item_discount['quantity']
        text += f"{i+1}. {item_discount.get('name', '–¢–æ–≤–∞—Ä')}\n"
        text += f"   {format_price(item_discount['final_price'])} √ó {item_discount['quantity']} = {format_price(item_total)}"

        if item_discount.get('discount_percent', 0) > 0:
            text += f" üéâ (-{item_discount['discount_percent']}%)"
        text += "\n\n"

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        keyboard.append([
            InlineKeyboardButton("‚ûñ", callback_data=f"qty_decrease_{original_item['id']}"),
            InlineKeyboardButton(f"{item_discount['quantity']} —à—Ç", callback_data="ignore"),
            InlineKeyboardButton("‚ûï", callback_data=f"qty_increase_{original_item['id']}"),
            InlineKeyboardButton("üóëÔ∏è", callback_data=f"remove_item_{original_item['id']}")
        ])

    text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
    text += format_price_summary(pricing_info, show_delivery=True)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append([InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")])
    keyboard.append([
        InlineKeyboardButton("üõçÔ∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="flowers_shop"),
        InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear_cart")
    ])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return FLOWERS_CART


async def flowers_update_quantity(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞"""

    query = update.callback_query
    await query.answer()

    callback_data = query.data
    cart = context.user_data.get('cart', [])

    if callback_data.startswith("qty_increase_"):
        product_id = int(callback_data.replace("qty_increase_", ""))
        item = next((i for i in cart if i['id'] == product_id), None)
        if item:
            item['quantity'] += 1
            await query.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ {item['quantity']}")

    elif callback_data.startswith("qty_decrease_"):
        product_id = int(callback_data.replace("qty_decrease_", ""))
        item = next((i for i in cart if i['id'] == product_id), None)
        if item:
            if item['quantity'] > 1:
                item['quantity'] -= 1
                await query.answer(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ {item['quantity']}")
            else:
                cart.remove(item)
                await query.answer("‚úÖ –¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

    # –û–±–Ω–æ–≤–∏—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
    return await flowers_view_cart(update, context)


async def flowers_remove_item(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã"""

    query = update.callback_query

    product_id = int(query.data.replace("remove_item_", ""))
    cart = context.user_data.get('cart', [])

    item = next((i for i in cart if i['id'] == product_id), None)
    if item:
        cart.remove(item)
        await query.answer(f"‚úÖ {item['name']} —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã")

    # –û–±–Ω–æ–≤–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
    return await flowers_view_cart(update, context)


async def flowers_clear_cart(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∫–æ—Ä–∑–∏–Ω—É"""

    query = update.callback_query
    await query.answer()

    context.user_data['cart'] = []

    await query.edit_message_text(
        "‚úÖ –ö–æ—Ä–∑–∏–Ω–∞ –æ—á–∏—â–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚óÄÔ∏è –ö –∫–∞—Ç–∞–ª–æ–≥—É", callback_data="flowers_shop")
        ]])
    )

    return FLOWERS_CATEGORY


# =================================================================
# –®–ê–ì 4-11: –û–§–û–†–ú–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê (–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)
# =================================================================


# –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
# –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∏–∑ flowers_checkout()

async def flowers_checkout(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.answer("‚ùå –ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞", show_alert=True)
        return FLOWERS_CATEGORY
    
    # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
    context.user_data['delivery_type'] = "–°–∞–º–æ–≤—ã–≤–æ–∑"
    context.user_data['delivery_address'] = "–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Å–∞–ª–æ–Ω–∞"
    context.user_data['delivery_time'] = "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"
    context.user_data['anonymous'] = False
    context.user_data['card_text'] = ""
    context.user_data['recipient'] = update.effective_user.first_name
    context.user_data['bonus_used'] = 0
    
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    return await flowers_show_simple_confirmation(update, context)


async def flowers_show_simple_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–ø—Ä–æ—â–µ–Ω–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    
    cart = context.user_data.get('cart', [])
    subtotal = sum(item['price'] * item['quantity'] for item in cart)
    delivery = 0  # –°–∞–º–æ–≤—ã–≤–æ–∑
    total = subtotal

    text = "‚úÖ –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê:\n\nüõí –°–æ—Å—Ç–∞–≤:\n"
    for item in cart:
        text += f"‚Ä¢ {item['name']} √ó {item['quantity']} = {format_price(item['price'] * item['quantity'])}\n"

    text += f"\nüíµ –ò—Ç–æ–≥–æ: {format_price(total)}\n"
    text += f"üìç –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Å–∞–ª–æ–Ω–∞\n\n"
    text += "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_flowers_order")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return FLOWERS_CONFIRM


async def flowers_confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞"""
    query = update.callback_query
    await query.answer()
    
    user = update.effective_user
    cart = context.user_data.get('cart', [])
    
    try:
        subtotal = sum(item['price'] * item['quantity'] for item in cart)
        composition = ", ".join([f"{item['name']} x{item['quantity']}" for item in cart])
        
        # –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î
        items_json = json.dumps(cart, ensure_ascii=False)

        order_id = add_flower_order(
            user_id=user.id,
            user_name=user.first_name,
            phone='',
            items=items_json,
            total_amount=subtotal,
            delivery_type='pickup',
            delivery_address='–°–∞–º–æ–≤—ã–≤–æ–∑',
            delivery_time='–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏',
            anonymous=False,
            card_text='',
            recipient_name='',
            recipient_phone=''
        )

        if not order_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑")

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
        schedule_feedback_request(user.id, 'flower_order', order_id)

        # –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã
        if subtotal >= BONUS_THRESHOLD:
            bonus_earn = int(subtotal * BONUS_PERCENT / 100)
            add_bonus_points(user.id, bonus_earn, f"–ó–∞–∫–∞–∑ —Ü–≤–µ—Ç–æ–≤ #{order_id}")
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        admin_text = (
            f"üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –¶–í–ï–¢–û–í</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä: #{order_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name}"
        )
        if user.username:
            admin_text += f" (@{user.username})"
        admin_text += f"\n\nüõí –°–æ—Å—Ç–∞–≤:\n{composition}\n\nüíµ –ò—Ç–æ–≥–æ: {format_price(subtotal)}"

        await send_to_user_topic(context, user.id, user.first_name, admin_text, None)

        # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        response_text = f"üéâ –ó–∞–∫–∞–∑ #{order_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
        if subtotal >= BONUS_THRESHOLD:
            bonus_earn = int(subtotal * BONUS_PERCENT / 100)
            response_text += f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {format_price(bonus_earn)} –±–æ–Ω—É—Å–æ–≤!\n\n"
        response_text += "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è."
        
        await query.edit_message_text(
            response_text,
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        
        context.user_data['cart'] = []
        logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ —Ü–≤–µ—Ç–æ–≤ #{order_id}")
        return ConversationHandler.END
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return ConversationHandler.END


# =================================================================
# –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò –û–§–û–†–ú–õ–ï–ù–ò–Ø –ó–ê–ö–ê–ó–ê
# =================================================================

async def flowers_select_delivery_type(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: —Å–∞–º–æ–≤—ã–≤–æ–∑ –∏–ª–∏ –∫—É—Ä—å–µ—Ä"""

    query = update.callback_query
    await query.answer()

    if query.data == "delivery_pickup":
        context.user_data['delivery_type'] = "–°–∞–º–æ–≤—ã–≤–æ–∑"
        context.user_data['delivery_address'] = "–°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Å–∞–ª–æ–Ω–∞"
        context.user_data['delivery_time'] = "–ü–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏"
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∞–¥—Ä–µ—Å –∏ –≤—Ä–µ–º—è, —Å—Ä–∞–∑—É –∫ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏
        return await flowers_ask_anonymous_delivery(update, context)

    elif query.data == "delivery_courier":
        context.user_data['delivery_type'] = "–î–æ—Å—Ç–∞–≤–∫–∞"
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–≤–æ–¥—É –∞–¥—Ä–µ—Å–∞
        return await flowers_ask_address(update, context)

    return FLOWERS_DELIVERY_TYPE


async def flowers_ask_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–ª–∏ –Ω–æ–≤—ã–π)"""

    query = update.callback_query
    user_id = update.effective_user.id
    addresses = get_addresses(user_id)

    keyboard = []

    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∞–¥—Ä–µ—Å–∞
    if addresses:
        for addr_id, address, is_default in addresses[:5]:
            prefix = "‚úÖ " if is_default else "   "
            keyboard.append([InlineKeyboardButton(
                f"{prefix}{address[:35]}...",
                callback_data=f"select_address_{addr_id}"
            )])

    keyboard.append([InlineKeyboardButton("‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å", callback_data="new_address")])
    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_delivery")])

    await query.edit_message_text(
        "üìç –ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return FLOWERS_ADDRESS


async def flowers_handle_address_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞"""

    query = update.callback_query
    await query.answer()

    if query.data == "new_address":
        await query.edit_message_text(
            "üìç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å:\n"
            "–£–ª–∏—Ü–∞, –¥–æ–º, –ø–æ–¥—ä–µ–∑–¥, —ç—Ç–∞–∂, –∫–≤–∞—Ä—Ç–∏—Ä–∞\n\n"
            "–ü—Ä–∏–º–µ—Ä: —É–ª. –õ–µ–Ω–∏–Ω–∞, 50, –ø–æ–¥—ä–µ–∑–¥ 2, –∫–≤. 10"
        )
        return FLOWERS_ADDRESS

    if query.data == "back_to_delivery":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        keyboard = [
            [InlineKeyboardButton("üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑ (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)", callback_data="delivery_pickup")],
            [InlineKeyboardButton("üöó –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –ß–µ–ª—è–±–∏–Ω—Å–∫—É", callback_data="delivery_courier")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ—Ä–∑–∏–Ω–µ", callback_data="view_cart")]
        ]
        await query.edit_message_text(
            "üöö –°–ø–æ—Å–æ–± –ø–æ–ª—É—á–µ–Ω–∏—è:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return FLOWERS_DELIVERY_TYPE

    # –í—ã–±—Ä–∞–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
    if query.data.startswith("select_address_"):
        addr_id = int(query.data.replace("select_address_", ""))
        addresses = get_addresses(update.effective_user.id)
        address = next((addr[1] for addr in addresses if addr[0] == addr_id), None)

        if address:
            context.user_data['delivery_address'] = address
            return await flowers_ask_delivery_time(update, context)

    await query.answer("‚ùå –ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
    return FLOWERS_ADDRESS


async def flowers_enter_new_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏"""

    address = update.message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã
    if len(address) < 10:
        await update.message.reply_text(
            "‚ùå –ê–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π.\n"
            "–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return FLOWERS_ADDRESS

    context.user_data['delivery_address'] = address

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
    try:
        add_address(update.effective_user.id, address, is_default=False)
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}")

    return await flowers_ask_delivery_time(update, context)


async def flowers_ask_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""

    keyboard = [
        [InlineKeyboardButton("‚ö° –ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ", callback_data="time_asap")],
        [InlineKeyboardButton("üïê –ö –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –≤—Ä–µ–º–µ–Ω–∏", callback_data="time_specific")],
        [InlineKeyboardButton("üìÖ –í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è", callback_data="time_datetime")]
    ]

    text = "‚è∞ –í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:"

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return FLOWERS_TIME


async def flowers_handle_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ—Å—Ç–∞–≤–∫–∏"""

    query = update.callback_query
    await query.answer()

    if query.data == "time_asap":
        context.user_data['delivery_time'] = "–ö–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ"
        return await flowers_ask_anonymous_delivery(update, context)

    elif query.data == "time_specific":
        await query.edit_message_text(
            "üïê –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n\n"
            "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)\n"
            "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω: 14:00-16:00"
        )
        context.user_data['waiting_for_time_input'] = True
        return FLOWERS_TIME

    elif query.data == "time_datetime":
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        from utils.calendar import create_calendar
        calendar_keyboard = create_calendar()
        await query.edit_message_text(
            "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
            reply_markup=calendar_keyboard
        )
        context.user_data['waiting_for_date_input'] = True
        return FLOWERS_TIME

    return FLOWERS_TIME


async def flowers_enter_delivery_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    if update.callback_query and context.user_data.get('waiting_for_date_input'):
        query = update.callback_query
        callback_data = query.data

        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
        if callback_data.startswith("calendar_prev_") or callback_data.startswith("calendar_next_"):
            from utils.calendar import create_calendar, handle_calendar_navigation
            parts = callback_data.split("_")
            year = int(parts[2])
            month = int(parts[3])
            new_year, new_month = handle_calendar_navigation(callback_data, year, month)
            calendar_keyboard = create_calendar(new_year, new_month)
            await query.edit_message_text(
                "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:",
                reply_markup=calendar_keyboard
            )
            return FLOWERS_TIME

        # –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞
        if callback_data.startswith("calendar_"):
            selected_date = callback_data.replace("calendar_", "")
            context.user_data['delivery_date'] = selected_date
            context.user_data['waiting_for_date_input'] = False

            await query.edit_message_text(
                f"üìÖ –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞: {selected_date}\n\n"
                "üïê –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è:\n"
                "–§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)"
            )
            context.user_data['waiting_for_time_input'] = True
            return FLOWERS_TIME

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ç–µ–∫—Å—Ç–æ–º
    if update.message:
        time_text = update.message.text.strip()

        # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è
        import re
        if re.match(r'^\d{1,2}:\d{2}$', time_text) or re.match(r'^\d{1,2}:\d{2}-\d{1,2}:\d{2}$', time_text):
            if context.user_data.get('delivery_date'):
                from utils.helpers import format_datetime
                context.user_data['delivery_time'] = f"{context.user_data['delivery_date']} {time_text}"
            else:
                context.user_data['delivery_time'] = f"–°–µ–≥–æ–¥–Ω—è {time_text}"

            context.user_data.pop('waiting_for_time_input', None)
            return await flowers_ask_anonymous_delivery(update, context)
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 14:30)"
            )
            return FLOWERS_TIME

    return FLOWERS_TIME


async def flowers_ask_anonymous_delivery(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å –æ–± –∞–Ω–æ–Ω–∏–º–Ω–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ"""

    keyboard = [
        [InlineKeyboardButton("–î–∞, –∞–Ω–æ–Ω–∏–º–Ω–æ üé≠", callback_data="anonymous_yes")],
        [InlineKeyboardButton("–ù–µ—Ç, –æ–±—ã—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞", callback_data="anonymous_no")]
    ]

    text = (
        "üé≠ –°–¥–µ–ª–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É –∞–Ω–æ–Ω–∏–º–Ω–æ–π?\n\n"
        "–ö—É—Ä—å–µ—Ä –Ω–µ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—é."
    )

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return FLOWERS_ANONYMOUS


async def flowers_handle_anonymous(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–Ω–æ–Ω–∏–º–Ω–æ—Å—Ç–∏"""

    query = update.callback_query
    await query.answer()

    context.user_data['is_anonymous'] = (query.data == "anonymous_yes")

    return await flowers_ask_card_text(update, context)


async def flowers_ask_card_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å –æ —Ç–µ–∫—Å—Ç–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏"""

    query = update.callback_query

    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_card")]]

    text = (
        "üíå –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∫–∏:\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤)\n"
        "–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
    )

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return FLOWERS_CARD


async def flowers_handle_card_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∫—Ä—ã—Ç–∫–∏"""

    if update.callback_query and update.callback_query.data == "skip_card":
        query = update.callback_query
        await query.answer()
        context.user_data['card_text'] = ""
        return await flowers_ask_recipient_data(update, context)

    # –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞
    if update.message:
        card_text = update.message.text.strip()

        if len(card_text) > 200:
            await update.message.reply_text(
                "‚ùå –¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤).\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å."
            )
            return FLOWERS_CARD

        context.user_data['card_text'] = card_text
        return await flowers_ask_recipient_data(update, context)

    return FLOWERS_CARD


async def flowers_ask_recipient_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""

    text = (
        "üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"
        "–§–æ—Ä–º–∞—Ç: –ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω\n"
        "–ü—Ä–∏–º–µ—Ä: –ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞, +7 (912) 345-67-89"
    )

    if update.message:
        await update.message.reply_text(text)
    else:
        await update.callback_query.edit_message_text(text)

    return FLOWERS_RECIPIENT


async def flowers_handle_recipient_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""

    text = update.message.text.strip()

    # –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∏—Ç—å –Ω–∞ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω
    if ',' in text:
        parts = text.split(',', 1)
        recipient_name = parts[0].strip()
        recipient_phone = parts[1].strip()
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø—è—Ç–æ–π, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º—è
        recipient_name = text
        recipient_phone = ""

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
    if recipient_phone:
        from utils.validators import validate_phone, format_phone
        if not validate_phone(recipient_phone):
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7 (XXX) XXX-XX-XX\n\n"
                "–ò–ª–∏ —É–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ –∏–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª–µ–Ω."
            )
            return FLOWERS_RECIPIENT
        recipient_phone = format_phone(recipient_phone)

    context.user_data['recipient_name'] = recipient_name
    context.user_data['recipient_phone'] = recipient_phone

    return await flowers_ask_payment_method(update, context)


async def flowers_ask_payment_method(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –±–æ–Ω—É—Å–æ–≤ –∏ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π –ø–æ–¥–ø–∏—Å–∫–∏"""

    user_id = update.effective_user.id
    cart = context.user_data.get('cart', [])

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ—Ä–∑–∏–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
    cart_items = [{'price': item['price'], 'quantity': item['quantity'], 'type': 'flower'} for item in cart]

    delivery_type = context.user_data.get('delivery_type', '–°–∞–º–æ–≤—ã–≤–æ–∑')
    base_subtotal = sum(item['price'] * item['quantity'] for item in cart)
    delivery_cost = 0 if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑" else calculate_delivery_cost(base_subtotal)

    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å —É—á–µ—Ç–æ–º –ø–æ–¥–ø–∏—Å–∫–∏
    pricing_info = calculate_cart_total(user_id, cart_items, delivery_cost)
    total = pricing_info['final_total']

    # –ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤
    bonus_balance = get_bonus_balance(user_id)

    # –ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å 50% –æ—Ç —Å—É–º–º—ã
    max_bonus_use = int(total * MAX_BONUS_PAYMENT_PERCENT / 100)
    available_bonus = min(bonus_balance, max_bonus_use)

    text = "üí≥ –û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:\n\n"
    text += format_price_summary(pricing_info, show_delivery=True)

    if bonus_balance > 0:
        text += (
            f"\nüéÅ –£ –≤–∞—Å {bonus_balance} –±–æ–Ω—É—Å–æ–≤\n"
            f"–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ {available_bonus} –±–æ–Ω—É—Å–æ–≤ (50% –æ—Ç —Å—É–º–º—ã)\n"
        )

    text += "\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    context.user_data['pricing_info'] = pricing_info

    keyboard = [
        [InlineKeyboardButton("üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏", callback_data="payment_cash")]
    ]

    if available_bonus > 0:
        keyboard.append([
            InlineKeyboardButton(
                f"üéÅ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å {available_bonus} –±–æ–Ω—É—Å–æ–≤",
                callback_data="payment_bonus_max"
            )
        ])
        keyboard.append([
            InlineKeyboardButton("üíé –ß–∞—Å—Ç–∏—á–Ω–æ –±–æ–Ω—É—Å–∞–º–∏", callback_data="payment_bonus_partial")
        ])

    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return FLOWERS_PAYMENT


async def flowers_handle_payment_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""

    query = update.callback_query
    await query.answer()

    if query.data == "payment_cash":
        context.user_data['bonus_used'] = 0
        return await flowers_show_full_confirmation(update, context)

    elif query.data == "payment_bonus_max":
        # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
        cart = context.user_data.get('cart', [])
        subtotal = sum(item['price'] * item['quantity'] for item in cart)
        delivery_type = context.user_data.get('delivery_type', '–°–∞–º–æ–≤—ã–≤–æ–∑')
        delivery_cost = 0 if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑" else calculate_delivery_cost(subtotal)
        total = subtotal + delivery_cost

        user_id = update.effective_user.id
        bonus_balance = get_bonus_balance(user_id)
        max_bonus_use = int(total * MAX_BONUS_PAYMENT_PERCENT / 100)
        available_bonus = min(bonus_balance, max_bonus_use)

        context.user_data['bonus_used'] = available_bonus
        return await flowers_show_full_confirmation(update, context)

    elif query.data == "payment_bonus_partial":
        await query.edit_message_text(
            "üíé –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n"
            "(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≤—Å–µ' —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–∞–∫—Å–∏–º—É–º)"
        )
        context.user_data['waiting_for_bonus_input'] = True
        return FLOWERS_PAYMENT

    return FLOWERS_PAYMENT


async def flowers_enter_bonus_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–æ–Ω—É—Å–æ–≤"""

    text = update.message.text.lower().strip()

    cart = context.user_data.get('cart', [])
    subtotal = sum(item['price'] * item['quantity'] for item in cart)
    delivery_type = context.user_data.get('delivery_type', '–°–∞–º–æ–≤—ã–≤–æ–∑')
    delivery_cost = 0 if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑" else calculate_delivery_cost(subtotal)
    total = subtotal + delivery_cost

    user_id = update.effective_user.id
    bonus_balance = get_bonus_balance(user_id)
    max_bonus_use = int(total * MAX_BONUS_PAYMENT_PERCENT / 100)
    available_bonus = min(bonus_balance, max_bonus_use)

    if text in ["–≤—Å–µ", "–≤—Å—ë", "–≤—Å–µ –±–æ–Ω—É—Å—ã"]:
        context.user_data['bonus_used'] = available_bonus
    else:
        try:
            amount = int(text)

            if amount < 0:
                await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
                return FLOWERS_PAYMENT

            if amount > available_bonus:
                await update.message.reply_text(
                    f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤.\n"
                    f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_bonus}\n"
                    f"–ú–∞–∫—Å–∏–º—É–º –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: {available_bonus} ({MAX_BONUS_PAYMENT_PERCENT}% –æ—Ç —Å—É–º–º—ã)"
                )
                return FLOWERS_PAYMENT

            context.user_data['bonus_used'] = amount
        except ValueError:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –∏–ª–∏ '–≤—Å–µ'"
            )
            return FLOWERS_PAYMENT

    context.user_data.pop('waiting_for_bonus_input', None)
    return await flowers_show_full_confirmation(update, context)


async def flowers_show_full_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å–æ –≤—Å–µ–º–∏ –¥–µ—Ç–∞–ª—è–º–∏"""

    cart = context.user_data.get('cart', [])
    delivery_type = context.user_data.get('delivery_type', '–°–∞–º–æ–≤—ã–≤–æ–∑')
    delivery_address = context.user_data.get('delivery_address', '')
    delivery_time = context.user_data.get('delivery_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    is_anonymous = context.user_data.get('is_anonymous', False)
    card_text = context.user_data.get('card_text', '')
    recipient_name = context.user_data.get('recipient_name', '–ù–µ —É–∫–∞–∑–∞–Ω')
    recipient_phone = context.user_data.get('recipient_phone', '')
    bonus_used = context.user_data.get('bonus_used', 0)

    # –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–Ω–∞—Ö (–±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ —Ä–∞–Ω–µ–µ)
    pricing_info = context.user_data.get('pricing_info')

    if not pricing_info:
        # –ï—Å–ª–∏ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å
        user_id = update.effective_user.id
        cart_items = [{'price': item['price'], 'quantity': item['quantity'], 'type': 'flower'} for item in cart]
        base_subtotal = sum(item['price'] * item['quantity'] for item in cart)
        delivery_cost = 0 if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑" else calculate_delivery_cost(base_subtotal)
        pricing_info = calculate_cart_total(user_id, cart_items, delivery_cost)

    total = pricing_info['final_total']
    total_after_bonus = total - bonus_used

    # –¢–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    text = "‚úÖ –ü–û–î–¢–í–ï–†–î–ò–¢–ï –ó–ê–ö–ê–ó:\n\n"

    text += "üõí –°–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞:\n"
    for item in pricing_info['items_with_discount']:
        item_total = item['final_price'] * item['quantity']
        text += f"   ‚Ä¢ {item.get('name', '–¢–æ–≤–∞—Ä')} √ó {item['quantity']} = {format_price(item_total)}"

        if item.get('discount_percent', 0) > 0:
            text += f" (—Å–∫–∏–¥–∫–∞ {item['discount_percent']}%)"
        text += "\n"

    text += "\n"
    text += format_price_summary(pricing_info, show_delivery=True)

    if bonus_used > 0:
        text += f"üíé –û–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏: -{format_price(bonus_used)}\n"
        text += f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {format_price(total_after_bonus)}\n"

    text += "\n"

    text += f"üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ: {delivery_type}\n"
    if delivery_type == "–î–æ—Å—Ç–∞–≤–∫–∞":
        text += f"üìç –ê–¥—Ä–µ—Å: {delivery_address}\n"
    text += f"‚è∞ –í—Ä–µ–º—è: {delivery_time}\n"
    text += f"üé≠ –ê–Ω–æ–Ω–∏–º–Ω–æ: {'–î–∞' if is_anonymous else '–ù–µ—Ç'}\n"

    if card_text:
        text += f"üíå –û—Ç–∫—Ä—ã—Ç–∫–∞: \"{card_text[:50]}{'...' if len(card_text) > 50 else ''}\"\n"

    text += f"\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:\n"
    text += f"   –ò–º—è: {recipient_name}\n"
    if recipient_phone:
        text += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {recipient_phone}\n"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_full_order")],
        [InlineKeyboardButton("‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="flowers_shop")]
    ]

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return FLOWERS_CONFIRM


async def flowers_create_full_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""

    query = update.callback_query
    await query.answer()

    user = update.effective_user
    cart = context.user_data.get('cart', [])

    try:
        # –°–æ–±—Ä–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        delivery_type = context.user_data.get('delivery_type', '–°–∞–º–æ–≤—ã–≤–æ–∑')
        delivery_address = context.user_data.get('delivery_address', '')
        delivery_time = context.user_data.get('delivery_time', '')
        is_anonymous = context.user_data.get('is_anonymous', False)
        card_text = context.user_data.get('card_text', '')
        recipient_name = context.user_data.get('recipient_name', '')
        recipient_phone = context.user_data.get('recipient_phone', '')
        bonus_used = context.user_data.get('bonus_used', 0)

        # –ü–æ–¥—Å—á–µ—Ç
        subtotal = sum(item['price'] * item['quantity'] for item in cart)
        delivery_cost = 0 if delivery_type == "–°–∞–º–æ–≤—ã–≤–æ–∑" else calculate_delivery_cost(subtotal)
        total = subtotal + delivery_cost

        # –°–æ–∑–¥–∞—Ç—å —Å—Ç—Ä–æ–∫—É —Å–æ—Å—Ç–∞–≤–∞
        composition = ", ".join([f"{item['name']} x{item['quantity']}" for item in cart])

        # –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω
        user_data = get_user(user.id)
        phone = recipient_phone or (user_data[3] if user_data else '')

        # –°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î
        items_json = json.dumps(cart, ensure_ascii=False)

        order_id = add_flower_order(
            user_id=user.id,
            user_name=user.first_name,
            phone=phone,
            items=items_json,
            total_amount=total - bonus_used,
            delivery_type='delivery' if delivery_type == "–î–æ—Å—Ç–∞–≤–∫–∞" else 'pickup',
            delivery_address=delivery_address,
            delivery_time=delivery_time,
            anonymous=is_anonymous,
            card_text=card_text,
            recipient_name=recipient_name,
            recipient_phone=recipient_phone
        )

        if not order_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ –≤ –ë–î")

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
        schedule_feedback_request(user.id, 'flower_order', order_id)

        # –°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å
        if bonus_used > 0:
            subtract_bonus_points(user.id, bonus_used, f"–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤ #{order_id}")
            logger.info(f"–°–ø–∏—Å–∞–Ω–æ {bonus_used} –±–æ–Ω—É—Å–æ–≤ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        # –ù–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã –∑–∞ –∑–∞–∫–∞–∑ (5% –µ—Å–ª–∏ >= 3000)
        if total >= FREE_DELIVERY_THRESHOLD:
            bonus_earned = int(total * BONUS_PERCENT / 100)
            add_bonus_points(user.id, bonus_earned, f"–ó–∞–∫–∞–∑ —Ü–≤–µ—Ç–æ–≤ #{order_id}")
            bonus_message = f"\n\nüéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_earned} –±–æ–Ω—É—Å–æ–≤!"
        else:
            bonus_message = ""

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        try:
            check_and_award_referral_bonus(order_id, user.id, total - bonus_used)
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Å–∏–π UTM
        try:
            user_data = get_user(user.id)
            if user_data and len(user_data) > 9 and user_data[9]:  # utm_source exists
                utm_code = f"{user_data[9]}__{user_data[10] or ''}__{user_data[11] or ''}__{user_data[12] or ''}__{user_data[13] or ''}"
                update_utm_campaign_stats(utm_code, 'conversion', total - bonus_used)
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ UTM-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {utm_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UTM-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
        admin_text = (
            "üÜï <b>–ù–û–í–´–ô –ó–ê–ö–ê–ó –¶–í–ï–¢–û–í</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä: #{order_id}\n"
            f"üë§ –ó–∞–∫–∞–∑—á–∏–∫: {user.first_name}"
        )

        if user.username:
            admin_text += f" (@{user.username})"

        admin_text += (
            f"\nüìû –ó–∞–∫–∞–∑—á–∏–∫: {get_user(user.id)[3] if get_user(user.id) else '–ù–µ —É–∫–∞–∑–∞–Ω'}\n\n"
            f"üõí –°–æ—Å—Ç–∞–≤:\n{composition}\n\n"
            f"üí∞ –°—É–º–º–∞: {format_price(subtotal)}\n"
        )

        if delivery_cost > 0:
            admin_text += f"üöö –î–æ—Å—Ç–∞–≤–∫–∞: {format_price(delivery_cost)}\n"
        else:
            admin_text += "üöö –î–æ—Å—Ç–∞–≤–∫–∞: –ë–ï–°–ü–õ–ê–¢–ù–û\n"

        if bonus_used > 0:
            admin_text += f"üíé –û–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏: {format_price(bonus_used)}\n"

        admin_text += (
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {format_price(total - bonus_used)}\n\n"
        )

        if delivery_type == "–î–æ—Å—Ç–∞–≤–∫–∞":
            admin_text += (
                f"üìç –ê–¥—Ä–µ—Å: {delivery_address}\n"
                f"‚è∞ –í—Ä–µ–º—è: {delivery_time}\n"
            )
        else:
            admin_text += "üì¶ –°–∞–º–æ–≤—ã–≤–æ–∑ –∏–∑ —Å–∞–ª–æ–Ω–∞\n"

        admin_text += f"üé≠ –ê–Ω–æ–Ω–∏–º–Ω–æ: {'–î–ê' if is_anonymous else '–ù–ï–¢'}\n"

        if card_text:
            admin_text += f"üíå –û—Ç–∫—Ä—ã—Ç–∫–∞: \"{card_text}\"\n"

        admin_text += (
            f"\nüë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å:\n"
            f"   –ò–º—è: {recipient_name}\n"
        )

        if recipient_phone:
            admin_text += f"   –¢–µ–ª–µ—Ñ–æ–Ω: {recipient_phone}\n"

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
        await send_to_user_topic(context, user.id, user.first_name, admin_text, None)

        # TODO: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ (—Å–¥–µ–ª–∞–µ–º –ø–æ–∑–∂–µ)

        # –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
        await query.edit_message_text(
            f"üéâ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: #{order_id}\n\n"
            f"üíµ –ö –æ–ø–ª–∞—Ç–µ: {format_price(total - bonus_used)}\n\n"
            f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
            f"–ö—É—Ä—å–µ—Ä –¥–æ—Å—Ç–∞–≤–∏—Ç –±—É–∫–µ—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è.{bonus_message}",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

        # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        logger.info(f"–°–æ–∑–¥–∞–Ω –∑–∞–∫–∞–∑ —Ü–≤–µ—Ç–æ–≤ #{order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return ConversationHandler.END


# =================================================================
# –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ó–ê–ö–ê–ó –ë–£–ö–ï–¢–ê
# =================================================================

async def custom_order_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""

    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üé® –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ë–£–ö–ï–¢\n\n"
        "–û–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–∞–º–∏, –∫–∞–∫–æ–π –±—É–∫–µ—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ:\n\n"
        "‚Ä¢ –ö–∞–∫–∏–µ —Ü–≤–µ—Ç—ã?\n"
        "‚Ä¢ –¶–≤–µ—Ç–æ–≤–∞—è –≥–∞–º–º–∞?\n"
        "‚Ä¢ –†–∞–∑–º–µ—Ä?\n"
        "‚Ä¢ –ü–æ–≤–æ–¥?\n"
        "‚Ä¢ –ë—é–¥–∂–µ—Ç?\n\n"
        "–ü—Ä–∏–º–µ—Ä: \"–•–æ—á—É –±—É–∫–µ—Ç –∏–∑ —Ä–æ–∑–æ–≤—ã—Ö –ø–∏–æ–Ω–æ–≤ –∏ –±–µ–ª—ã—Ö —Ä–æ–∑, "
        "—Ä–∞–∑–º–µ—Ä —Å—Ä–µ–¥–Ω–∏–π, –Ω–∞ –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è, –±—é–¥–∂–µ—Ç –¥–æ 4000‚ÇΩ\"\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è:"
    )

    return 0  # CUSTOM_ORDER_DESCRIPTION


async def custom_order_process(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞"""

    description = update.message.text
    user = update.effective_user

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—É
    admin_text = (
        "üé® <b>–ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–´–ô –ó–ê–ö–ê–ó –ë–£–ö–ï–¢–ê</b>\n\n"
        f"üë§ –û—Ç: {user.first_name}"
    )

    if user.username:
        admin_text += f" (@{user.username})"

    user_data = get_user(user.id)
    if user_data and user_data[3]:
        admin_text += f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[3]}"

    admin_text += (
        f"\nüÜî User ID: {user.id}\n\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{description}"
    )

    admin_keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üí¨ –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É", url=f"tg://user?id={user.id}")]
    ])

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
    await send_to_user_topic(context, user.id, user.first_name, admin_text, admin_keyboard)

    await update.message.reply_text(
        "‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç!\n\n"
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
        "–¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        ]])
    )

    logger.info(f"–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∑–∞–∫–∞–∑ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

    return ConversationHandler.END
