"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.
–ü–æ–∫—É–ø–∫–∞ –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import CERT_AMOUNT, CERT_RECIPIENT, CERT_CONFIRM
from database import add_certificate
from utils.helpers import format_price, generate_order_number, send_to_user_topic
import random
import string

logger = logging.getLogger(__name__)


def generate_certificate_code():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""
    part1 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    part2 = ''.join(random.choices(string.ascii_uppercase + string.digits, k=4))
    return f"CERT-{part1}-{part2}"


async def certificate_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞"""

    query = update.callback_query
    await query.answer()

    context.user_data.clear()

    keyboard = [
        [
            InlineKeyboardButton("2000‚ÇΩ", callback_data="cert_amt_2000"),
            InlineKeyboardButton("3000‚ÇΩ", callback_data="cert_amt_3000")
        ],
        [
            InlineKeyboardButton("5000‚ÇΩ", callback_data="cert_amt_5000"),
            InlineKeyboardButton("‚úçÔ∏è –°–≤–æ—è —Å—É–º–º–∞", callback_data="cert_amt_custom")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

    await query.edit_message_text(
        "üéÅ –ü–û–î–ê–†–û–ß–ù–´–ï –°–ï–†–¢–ò–§–ò–ö–ê–¢–´\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–∏–Ω–∞–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return CERT_AMOUNT


async def certificate_select_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –Ω–æ–º–∏–Ω–∞–ª–∞"""

    query = update.callback_query
    await query.answer()

    if query.data == "cert_amt_custom":
        await query.edit_message_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞:\n\n"
            "(–º–∏–Ω–∏–º—É–º 1000‚ÇΩ)"
        )
        return CERT_AMOUNT

    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ–º–∏–Ω–∞–ª
    amount = int(query.data.replace("cert_amt_", ""))
    context.user_data['cert_amount'] = amount

    return await certificate_ask_recipient(update, context)


async def certificate_enter_custom_amount(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π —Å—É–º–º—ã"""

    try:
        amount = int(update.message.text)

        if amount < 1000:
            await update.message.reply_text(
                "‚ùå –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: 1000‚ÇΩ"
            )
            return CERT_AMOUNT

        if amount > 50000:
            await update.message.reply_text(
                "‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: 50000‚ÇΩ"
            )
            return CERT_AMOUNT

        context.user_data['cert_amount'] = amount
        return await certificate_ask_recipient(update, context)

    except ValueError:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 3500)"
        )
        return CERT_AMOUNT


async def certificate_ask_recipient(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–æ—Å–∏—Ç—å –¥–ª—è –∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç"""

    keyboard = [
        [InlineKeyboardButton("–î–ª—è —Å–µ–±—è", callback_data="cert_self")],
        [InlineKeyboardButton("–í –ø–æ–¥–∞—Ä–æ–∫", callback_data="cert_gift")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="buy_certificate")]
    ]

    text = "üë§ –î–ª—è –∫–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç?"

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return CERT_RECIPIENT


async def certificate_handle_recipient(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""

    query = update.callback_query
    await query.answer()

    if query.data == "cert_self":
        context.user_data['cert_recipient'] = "–°–µ–±–µ"
        context.user_data['cert_recipient_contact'] = ""
        return await certificate_show_confirmation(update, context)

    elif query.data == "cert_gift":
        await query.edit_message_text(
            "üë§ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏ —Ç–µ–ª–µ—Ñ–æ–Ω (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
            "–§–æ—Ä–º–∞—Ç: –ò–º—è, —Ç–µ–ª–µ—Ñ–æ–Ω\n"
            "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–º—è"
        )
        return CERT_RECIPIENT

    return CERT_RECIPIENT


async def certificate_enter_recipient_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª—è"""

    text = update.message.text.strip()
    context.user_data['cert_recipient'] = text
    context.user_data['cert_recipient_contact'] = text

    return await certificate_show_confirmation(update, context)


async def certificate_show_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"""

    amount = context.user_data.get('cert_amount')
    recipient = context.user_data.get('cert_recipient', '–ù–µ —É–∫–∞–∑–∞–Ω')

    text = (
        "‚úÖ –ü–û–î–¢–í–ï–†–î–ò–¢–ï –ü–û–ö–£–ü–ö–£:\n\n"
        f"üéÅ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–∞ {format_price(amount)}\n\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}\n\n"
        "üí≥ –û–ø–ª–∞—Ç–∞: –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤ —Å–∞–ª–æ–Ω–µ"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_certificate")],
        [InlineKeyboardButton("‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="buy_certificate")]
    ]

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return CERT_CONFIRM


async def certificate_confirm_purchase(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏"""

    query = update.callback_query
    await query.answer()

    user = update.effective_user
    amount = context.user_data.get('cert_amount')
    recipient = context.user_data.get('cert_recipient', '–ù–µ —É–∫–∞–∑–∞–Ω')

    try:
        # –°–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –≤ –ë–î (–∫–æ–¥ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        cert_code = add_certificate(amount, user.id)

        if not cert_code:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç")

        # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞
        from database import get_user
        user_data = get_user(user.id)
        phone = user_data[3] if user_data and user_data[3] else "–ù–µ —É–∫–∞–∑–∞–Ω"

        admin_text = (
            "üéÅ <b>–ù–û–í–´–ô –°–ï–†–¢–ò–§–ò–ö–ê–¢</b>\n\n"
            f"–ö–æ–¥: <code>{cert_code}</code>\n"
            f"–ù–æ–º–∏–Ω–∞–ª: {format_price(amount)}\n\n"
            f"–ö—É–ø–∏–ª: {user.first_name}"
        )

        if user.username:
            admin_text += f" (@{user.username})"

        admin_text += (
            f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient}\n\n"
            "–û–ø–ª–∞—Ç–∞: –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤ —Å–∞–ª–æ–Ω–µ"
        )

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
        await send_to_user_topic(context, user.id, user.first_name, admin_text, None)

        # –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
        await query.edit_message_text(
            f"üéâ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            f"üé´ –ö–æ–¥ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: <code>{cert_code}</code>\n"
            f"üí∞ –ù–æ–º–∏–Ω–∞–ª: {format_price(amount)}\n\n"
            "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –≤ —Å–∞–ª–æ–Ω–µ.\n"
            "–ö–æ–¥ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã –ª—é–±—ã—Ö —É—Å–ª—É–≥ –∏ —Ç–æ–≤–∞—Ä–æ–≤.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]]),
            parse_mode='HTML'
        )

        context.user_data.clear()
        logger.info(f"–°–æ–∑–¥–∞–Ω —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç {cert_code} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return ConversationHandler.END
