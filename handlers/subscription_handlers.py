"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫ –∏ –∫–∞—Ä—Ç –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from database import (
    get_subscription_plans, get_user_active_subscription,
    create_user_subscription
)
from utils.helpers import format_price

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è conversation handler
SUBSCRIPTION_CONFIRM = 1


async def subscriptions_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–æ–∫"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    active_sub = get_user_active_subscription(user_id)

    if active_sub:
        text = (
            f"üíé –í–ê–®–ê –ü–û–î–ü–ò–°–ö–ê\n\n"
            f"üìã –ü–ª–∞–Ω: {active_sub['plan_name']}\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {active_sub['end_date']}\n\n"
        )

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
        if active_sub['monthly_flowers_included'] > 0:
            used = active_sub['flowers_used_this_month']
            total = active_sub['monthly_flowers_included']
            text += f"üåπ –ë—É–∫–µ—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ: {total - used} –∏–∑ {total}\n"

        if active_sub['monthly_service_included']:
            status = "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞" if active_sub['service_used_this_month'] else "–î–æ—Å—Ç—É–ø–Ω–∞"
            text += f"üíÖ –£—Å–ª—É–≥–∞ —Å–∞–ª–æ–Ω–∞: {status}\n"

        if active_sub['service_discount_percent'] > 0:
            text += f"‚ú® –°–∫–∏–¥–∫–∞ –Ω–∞ —É—Å–ª—É–≥–∏: {active_sub['service_discount_percent']}%\n"

        if active_sub['flower_discount_percent'] > 0:
            text += f"üå∏ –°–∫–∏–¥–∫–∞ –Ω–∞ —Ü–≤–µ—Ç—ã: {active_sub['flower_discount_percent']}%\n"

        keyboard = [
            [InlineKeyboardButton("üåπ –ó–∞–±—Ä–∞—Ç—å –±—É–∫–µ—Ç", callback_data="subscription_claim_flower")],
            [InlineKeyboardButton("üíÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É", callback_data="subscription_claim_service")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
    else:
        text = (
            "üíé –ü–û–î–ü–ò–°–ö–ò –ò –ö–ê–†–¢–´\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –≤—ã–≥–æ–¥—ã!"
        )

        # –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–ª–∞–Ω—ã
        plans = get_subscription_plans()

        keyboard = []
        for plan in plans:
            keyboard.append([InlineKeyboardButton(
                f"{plan['name']} - {format_price(plan['price'])}",
                callback_data=f"subscription_view_{plan['id']}"
            )])

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def subscription_view_plan(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–∞—Ä–∏—Ñ–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""

    query = update.callback_query
    await query.answer()

    plan_id = int(query.data.replace("subscription_view_", ""))

    plans = get_subscription_plans(active_only=False)
    plan = next((p for p in plans if p['id'] == plan_id), None)

    if not plan:
        await query.edit_message_text(
            "‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="subscriptions")
            ]])
        )
        return

    duration_text = ""
    if plan['duration_months'] > 0:
        if plan['duration_months'] == 1:
            duration_text = "1 –º–µ—Å—è—Ü"
        elif plan['duration_months'] == 12:
            duration_text = "1 –≥–æ–¥"
        else:
            duration_text = f"{plan['duration_months']} –º–µ—Å."
    else:
        duration_text = "–û–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π –ø–∞–∫–µ—Ç"

    text = (
        f"üíé {plan['name'].upper()}\n\n"
        f"{plan['description']}\n\n"
        f"üìã –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
        f"{plan['benefits']}\n\n"
        f"üí∞ –¶–µ–Ω–∞: {format_price(plan['price'])}\n"
        f"‚è± –°—Ä–æ–∫: {duration_text}"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ö—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data=f"subscription_buy_{plan_id}")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="subscriptions")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def subscription_buy_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–∫—É–ø–∫—É –ø–æ–¥–ø–∏—Å–∫–∏"""

    query = update.callback_query
    await query.answer()

    plan_id = int(query.data.replace("subscription_buy_", ""))

    plans = get_subscription_plans(active_only=False)
    plan = next((p for p in plans if p['id'] == plan_id), None)

    if not plan:
        await query.edit_message_text("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return ConversationHandler.END

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å plan_id –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    context.user_data['subscription_plan_id'] = plan_id
    context.user_data['subscription_price'] = plan['price']

    text = (
        f"üí≥ –û–§–û–†–ú–õ–ï–ù–ò–ï –ü–û–î–ü–ò–°–ö–ò\n\n"
        f"–ü–ª–∞–Ω: {plan['name']}\n"
        f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {format_price(plan['price'])}\n\n"
        f"‚ö†Ô∏è –í–ê–ñ–ù–û: –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
        f"–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n"
        f"üí≥ –ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n"
        f"üë§ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: –û–û–û '–°–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã'\n\n"
        f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–Ø –æ–ø–ª–∞—Ç–∏–ª' –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç —á–µ–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data=f"subscription_paid_{plan_id}")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="subscriptions")]
    ]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return SUBSCRIPTION_CONFIRM


async def subscription_payment_sent(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–æ–±—â–∏–ª –æ–± –æ–ø–ª–∞—Ç–µ"""

    query = update.callback_query
    await query.answer()

    plan_id = context.user_data.get('subscription_plan_id')

    await query.edit_message_text(
        "‚úÖ –ó–ê–Ø–í–ö–ê –ü–†–ò–ù–Ø–¢–ê\n\n"
        "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.\n"
        "–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã.\n\n"
        "–û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ 30 –º–∏–Ω—É—Ç.\n"
        "–í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üëå –ü–æ–Ω—è—Ç–Ω–æ", callback_data="main_menu")
        ]])
    )

    # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∑–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É)
    from config import ADMIN_ID
    user = update.effective_user
    try:
        plans = get_subscription_plans(active_only=False)
        plan = next((p for p in plans if p['id'] == plan_id), None)

        if plan and ADMIN_ID:
            admin_text = (
                f"üîî –ù–û–í–ê–Ø –ó–ê–Ø–í–ö–ê –ù–ê –ü–û–î–ü–ò–°–ö–£\n\n"
                f"–û—Ç: {user.first_name} (@{user.username or '–Ω–µ—Ç'})\n"
                f"ID: {user.id}\n"
                f"–ü–ª–∞–Ω: {plan['name']}\n"
                f"–°—É–º–º–∞: {format_price(plan['price'])}\n\n"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–ø–ª–∞—Ç—É –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É."
            )
            await context.bot.send_message(
                chat_id=ADMIN_ID,
                text=admin_text
            )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –ø–æ–¥–ø–∏—Å–∫–µ: {e}")

    # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('subscription_plan_id', None)
    context.user_data.pop('subscription_price', None)

    return ConversationHandler.END


async def subscription_claim_flower(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–±—Ä–∞—Ç—å –±—É–∫–µ—Ç –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    sub = get_user_active_subscription(user_id)

    if not sub:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return await subscriptions_menu(update, context)

    if sub['monthly_flowers_included'] == 0:
        await query.answer("‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç –±—É–∫–µ—Ç—ã", show_alert=True)
        return await subscriptions_menu(update, context)

    if sub['flowers_used_this_month'] >= sub['monthly_flowers_included']:
        await query.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –≤—Å–µ –±—É–∫–µ—Ç—ã –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", show_alert=True)
        return await subscriptions_menu(update, context)

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Ü–≤–µ—Ç–æ–≤
    await query.edit_message_text(
        "üåπ –ë–£–ö–ï–¢ –ü–û –ü–û–î–ü–ò–°–ö–ï\n\n"
        "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—É–∫–µ—Ç–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.\n"
        "–ë—É–∫–µ—Ç –±—É–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –≤ —Ç–µ—á–µ–Ω–∏–µ 1-2 —á–∞—Å–æ–≤.",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üëå –ü–æ–Ω—è—Ç–Ω–æ", callback_data="subscriptions")
        ]])
    )


async def subscription_claim_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É—Å–ª—É–≥—É –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    sub = get_user_active_subscription(user_id)

    if not sub:
        await query.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", show_alert=True)
        return await subscriptions_menu(update, context)

    if not sub['monthly_service_included']:
        await query.answer("‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –≤–∫–ª—é—á–∞–µ—Ç —É—Å–ª—É–≥–∏", show_alert=True)
        return await subscriptions_menu(update, context)

    if sub['service_used_this_month']:
        await query.answer("‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —É—Å–ª—É–≥—É –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü", show_alert=True)
        return await subscriptions_menu(update, context)

    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∑–∞–ø–∏—Å—å –≤ —Å–∞–ª–æ–Ω
    await query.edit_message_text(
        "üíÖ –£–°–õ–£–ì–ê –ü–û –ü–û–î–ü–ò–°–ö–ï\n\n"
        "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω'.\n"
        "–ü—Ä–∏ –∑–∞–ø–∏—Å–∏ —É–∫–∞–∂–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∞.",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ —Å–∞–ª–æ–Ω", callback_data="salon_booking")],
            [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="subscriptions")]
        ])
    )
