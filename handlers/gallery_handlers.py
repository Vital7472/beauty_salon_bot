"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≥–∞–ª–µ—Ä–µ–∏ —Ä–∞–±–æ—Ç.
–§–æ—Ç–æ–≥–∞–ª–µ—Ä–µ—è —Ä–∞–±–æ—Ç —Å–∞–ª–æ–Ω–∞ –∏ –±—É–∫–µ—Ç–æ–≤.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import get_gallery_items

logger = logging.getLogger(__name__)


async def gallery_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–∞–ª–µ—Ä–µ—é"""

    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("üíá‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç—ã —Å–∞–ª–æ–Ω–∞", callback_data="gallery_salon")],
        [InlineKeyboardButton("üíê –ù–∞—à–∏ –±—É–∫–µ—Ç—ã", callback_data="gallery_flowers")],
        [InlineKeyboardButton("üì∏ –í—Å–µ —Ñ–æ—Ç–æ", callback_data="gallery_all")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

    await query.edit_message_text(
        "üì∏ –ù–ê–®–ò –†–ê–ë–û–¢–´\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def gallery_show_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    query = update.callback_query
    await query.answer()

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if query.data == "gallery_salon":
        category = "–°–∞–ª–æ–Ω"
        title = "üíá‚Äç‚ôÄÔ∏è –†–∞–±–æ—Ç—ã —Å–∞–ª–æ–Ω–∞"
    elif query.data == "gallery_flowers":
        category = "–¶–≤–µ—Ç—ã"
        title = "üíê –ù–∞—à–∏ –±—É–∫–µ—Ç—ã"
    else:
        category = None
        title = "üì∏ –í—Å–µ —Ñ–æ—Ç–æ"

    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ –∏–∑ –ë–î
        photos = get_gallery_items(category=category)

        if not photos:
            await query.edit_message_text(
                f"{title}\n\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gallery")
                ]])
            )
            return

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ (–º–∞–∫—Å–∏–º—É–º 10)
        await query.message.reply_text(f"{title}:")

        for photo in photos[:10]:
            photo_url = photo.get('photo_url')
            description = photo.get('description', '')

            caption = description if description else "üì∏ –ù–∞—à–∞ —Ä–∞–±–æ—Ç–∞"

            try:
                await query.message.reply_photo(
                    photo=photo_url,
                    caption=caption
                )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ {photo_url}: {e}")
                continue

        # –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
        await query.message.reply_text(
            "‚óÄÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–∞–ª–µ—Ä–µ—é",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gallery")
            ]])
        )

        # –£–¥–∞–ª–∏—Ç—å –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await query.message.delete()

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–∞–ª–µ—Ä–µ–∏: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≥–∞–ª–µ—Ä–µ–∏",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="gallery")
            ]])
        )
