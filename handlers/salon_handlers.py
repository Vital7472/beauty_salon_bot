"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–æ–¥—É–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω –∫—Ä–∞—Å–æ—Ç—ã.
–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∑–∞–ø–∏—Å–∏: –æ—Ç –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏ –¥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.
"""

import logging
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import ContextTypes, ConversationHandler

from config import (
    SALON_CATEGORY, SALON_SERVICE, SALON_DATE, SALON_TIME,
    SALON_PHONE, SALON_COMMENT, SALON_PAYMENT, SALON_CONFIRM,
    ADMIN_ID, ADMIN_GROUP_ID
)
from database import (
    get_user, update_user_phone, get_service_categories, get_services,
    get_service_by_id, add_salon_appointment, log_consent,
    schedule_feedback_request, check_and_award_referral_bonus, update_utm_campaign_stats
)
from utils.helpers import format_price, get_current_datetime, format_datetime, send_to_user_topic
from utils.calendar import create_calendar, handle_calendar_navigation
from utils.validators import validate_phone, format_phone

logger = logging.getLogger(__name__)


# =================================================================
# –®–ê–ì 1: –í–´–ë–û–† –ö–ê–¢–ï–ì–û–†–ò–ò –£–°–õ–£–ì
# =================================================================

async def salon_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω - –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É—Å–ª—É–≥"""

    query = update.callback_query
    await query.answer()

    # –û—á–∏—Å—Ç–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.clear()

    try:
        # –ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        categories = get_service_categories()

        if not categories:
            await query.edit_message_text(
                "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
                ]])
            )
            return ConversationHandler.END

        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        keyboard = []
        for category in categories:
            keyboard.append([InlineKeyboardButton(
                category,
                callback_data=f"salon_cat_{category}"
            )])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

        await query.edit_message_text(
            "üíá‚Äç‚ôÄÔ∏è –ó–ê–ü–ò–°–¨ –í –°–ê–õ–û–ù\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —É—Å–ª—É–≥:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        return SALON_CATEGORY

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ salon_start: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –í –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return ConversationHandler.END


# =================================================================
# –®–ê–ì 2: –í–´–ë–û–† –£–°–õ–£–ì–ò
# =================================================================

async def salon_select_category(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —É—Å–ª—É–≥–∏ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""

    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ callback_data
    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥ (back_to_services), –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    if query.data == "back_to_services":
        category = context.user_data.get('salon_category')
        if not category:
            # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –Ω–∞—á–∞–ª—É
            return await salon_start(update, context)
    else:
        category = query.data.replace("salon_cat_", "")
        context.user_data['salon_category'] = category

    try:
        # –ü–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
        services = get_services(category=category, active_only=True)

        if not services:
            await query.edit_message_text(
                f"‚ùå –í –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}' –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="salon_booking")
                ]])
            )
            return SALON_CATEGORY

        # –°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —É—Å–ª—É–≥–∞–º–∏
        keyboard = []
        for service in services:
            text = f"{service['name']} - {format_price(service['price'])}"
            keyboard.append([InlineKeyboardButton(
                text,
                callback_data=f"salon_srv_{service['id']}"
            )])
        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="salon_booking")])

        await query.edit_message_text(
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

        return SALON_SERVICE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ salon_select_category: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return ConversationHandler.END


# =================================================================
# –®–ê–ì 3: –í–´–ë–û–† –î–ê–¢–´ (–ö–ê–õ–ï–ù–î–ê–†–¨)
# =================================================================

async def salon_select_service(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã –∑–∞–ø–∏—Å–∏ - –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å"""

    query = update.callback_query
    await query.answer()

    # –ò–∑–≤–ª–µ—á—å ID —É—Å–ª—É–≥–∏
    service_id = int(query.data.replace("salon_srv_", ""))

    try:
        # –ü–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É –∏–∑ –ë–î
        service = get_service_by_id(service_id)

        if not service:
            await query.edit_message_text("‚ùå –£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return ConversationHandler.END

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É—Å–ª—É–≥—É
        context.user_data['salon_service'] = service

        # –°–æ–∑–¥–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        calendar_keyboard = create_calendar()

        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"üíÖ {service['name']}\n"
            f"üí∞ {format_price(service['price'])}\n"
            f"‚è±Ô∏è {service['duration_minutes']} –º–∏–Ω—É—Ç\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:"
        )

        await query.edit_message_text(text, reply_markup=calendar_keyboard)

        return SALON_DATE

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ salon_select_service: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        return ConversationHandler.END


async def salon_select_date(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è"""

    query = update.callback_query
    await query.answer()

    callback_data = query.data

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é (–ü—Ä–µ–¥/–°–ª–µ–¥)
    if callback_data.startswith("calendar_prev_") or callback_data.startswith("calendar_next_"):
        parts = callback_data.split("_")
        year = int(parts[2])
        month = int(parts[3])

        new_year, new_month = handle_calendar_navigation(callback_data, year, month)
        calendar_keyboard = create_calendar(new_year, new_month)

        service = context.user_data.get('salon_service')
        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"üíÖ {service['name']}\n"
            f"üí∞ {format_price(service['price'])}\n"
            f"‚è±Ô∏è {service['duration_minutes']} –º–∏–Ω—É—Ç\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:"
        )

        await query.edit_message_text(text, reply_markup=calendar_keyboard)
        return SALON_DATE

    # –í–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
    if callback_data == "back_to_services":
        return await salon_start(update, context)

    # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –¥–∞—Ç—ã
    if callback_data == "ignore":
        await query.answer("–≠—Ç–∞ –¥–∞—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        return SALON_DATE

    # –í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞
    if callback_data.startswith("calendar_"):
        selected_date = callback_data.replace("calendar_", "")
        context.user_data['salon_date'] = selected_date

        # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
        return await show_time_slots(update, context)

    return SALON_DATE


# =================================================================
# –®–ê–ì 4: –í–´–ë–û–† –í–†–ï–ú–ï–ù–ò
# =================================================================

async def show_time_slots(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞"""

    query = update.callback_query
    service = context.user_data.get('salon_service')
    selected_date = context.user_data.get('salon_date')

    keyboard = [
        [
            InlineKeyboardButton("09:00-12:00", callback_data="time_09-12"),
            InlineKeyboardButton("12:00-15:00", callback_data="time_12-15")
        ],
        [
            InlineKeyboardButton("15:00-18:00", callback_data="time_15-18"),
            InlineKeyboardButton("18:00-21:00", callback_data="time_18-21")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_calendar")]
    ]

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    dt = datetime.strptime(selected_date, "%Y-%m-%d")
    formatted_date = format_datetime(f"{selected_date} 00:00").split(',')[0]  # –¢–æ–ª—å–∫–æ –¥–∞—Ç—É

    text = (
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
        f"üíÖ {service['name']}\n"
        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è:"
    )

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return SALON_TIME


async def salon_select_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏"""

    query = update.callback_query
    await query.answer()

    if query.data == "back_to_calendar":
        # –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
        service = context.user_data.get('salon_service')
        calendar_keyboard = create_calendar()

        text = (
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏:\n"
            f"üíÖ {service['name']}\n"
            f"üí∞ {format_price(service['price'])}\n"
            f"‚è±Ô∏è {service['duration_minutes']} –º–∏–Ω—É—Ç\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –¥–∞—Ç—É:"
        )

        await query.edit_message_text(text, reply_markup=calendar_keyboard)
        return SALON_DATE

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    time_slot = query.data.replace("time_", "")
    context.user_data['salon_time'] = time_slot

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –µ—Å—Ç—å –ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –ë–î
    user = get_user(update.effective_user.id)

    if user and user[3]:  # user[3] = phone
        context.user_data['salon_phone'] = user[3]
        # –°—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
        return await salon_ask_comment(update, context)

    # –ó–∞–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω —Å —Å–æ–≥–ª–∞—Å–∏–µ–º –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    keyboard = [[KeyboardButton("üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]]

    await query.message.reply_text(
        "üìû –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –í–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –≤—Ä—É—á–Ω—É—é: +7 (XXX) XXX-XX-XX\n"
        "‚Ä¢ –ù–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'\n\n"
        "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b> –ù–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º' –∏–ª–∏ –≤–≤–æ–¥—è –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, "
        "–≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å <a href='https://example.com/privacy'>–ü–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a> "
        "–∏ –¥–∞–µ—Ç–µ <a href='https://example.com/consent'>–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>.\n\n"
        "–í–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ –±—É–¥–µ—Ç –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏.",
        reply_markup=ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True),
        parse_mode='HTML',
        disable_web_page_preview=True
    )

    return SALON_PHONE


# =================================================================
# –®–ê–ì 5: –í–í–û–î –¢–ï–õ–ï–§–û–ù–ê
# =================================================================

async def salon_enter_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ç–µ–∫—Å—Ç–æ–º"""

    phone = update.message.text

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not validate_phone(phone):
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: +7 (XXX) XXX-XX-XX"
        )
        return SALON_PHONE

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å
    formatted_phone = format_phone(phone)
    context.user_data['salon_phone'] = formatted_phone

    # –û–±–Ω–æ–≤–∏—Ç—å –≤ –ë–î
    update_user_phone(update.effective_user.id, formatted_phone)

    # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    log_consent(
        user_id=update.effective_user.id,
        user_name=update.effective_user.first_name,
        phone=formatted_phone,
        consent_type='manual_phone_input'
    )

    # –ü–µ—Ä–µ–π—Ç–∏ –∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é
    return await salon_ask_comment(update, context)


async def salon_contact_shared(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'"""

    phone = update.message.contact.phone_number

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
    formatted_phone = format_phone(phone)

    context.user_data['salon_phone'] = formatted_phone
    update_user_phone(update.effective_user.id, formatted_phone)

    # –õ–æ–≥–∏—Ä–æ–≤–∞—Ç—å —Å–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
    log_consent(
        user_id=update.effective_user.id,
        user_name=update.effective_user.first_name,
        phone=formatted_phone,
        consent_type='contact_share_button'
    )

    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.effective_user.id} ({update.effective_user.first_name}) "
                f"—Å–æ–≥–ª–∞—Å–∏–ª—Å—è —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º'")

    return await salon_ask_comment(update, context)


# =================================================================
# –®–ê–ì 6: –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö –ó–ê–ü–ò–°–ò
# =================================================================

async def salon_ask_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∑–∞–ø–∏—Å–∏"""

    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_comment")]]

    text = (
        "üí¨ –ï—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –∑–∞–ø–∏—Å–∏?\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':"
    )

    # –£–±—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
    if update.message:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return SALON_COMMENT


async def salon_enter_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""

    context.user_data['salon_comment'] = update.message.text
    return await salon_ask_payment(update, context)


async def salon_skip_comment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""

    query = update.callback_query
    await query.answer()

    context.user_data['salon_comment'] = ""
    return await salon_ask_payment(update, context)


# =================================================================
# –®–ê–ì 7: –°–ü–û–°–û–ë –û–ü–õ–ê–¢–´
# =================================================================

async def salon_ask_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""

    keyboard = [
        [InlineKeyboardButton("–û–ø–ª–∞—á—É –Ω–∞ –º–µ—Å—Ç–µ", callback_data="payment_onsite")],
        [InlineKeyboardButton("–í–Ω–µ—Å—Ç–∏ –ø—Ä–µ–¥–æ–ø–ª–∞—Ç—É –æ–Ω–ª–∞–π–Ω", callback_data="payment_online")],
    ]

    text = "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:"

    if update.message:
        await update.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await update.callback_query.message.reply_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    return SALON_PAYMENT


async def salon_select_payment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–ª–∞—Ç—ã"""

    query = update.callback_query
    await query.answer()

    payment = "–ù–∞ –º–µ—Å—Ç–µ" if query.data == "payment_onsite" else "–û–Ω–ª–∞–π–Ω (–ø–æ–∑–∂–µ)"
    context.user_data['salon_payment'] = payment

    # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    return await show_booking_confirmation(update, context)


# =================================================================
# –®–ê–ì 8: –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –ò –°–û–ó–î–ê–ù–ò–ï –ó–ê–ü–ò–°–ò
# =================================================================

async def show_booking_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""

    query = update.callback_query

    service = context.user_data.get('salon_service')
    date = context.user_data.get('salon_date')
    time_slot = context.user_data.get('salon_time')
    phone = context.user_data.get('salon_phone')
    comment = context.user_data.get('salon_comment', '–Ω–µ—Ç')
    payment = context.user_data.get('salon_payment')

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É
    formatted_date = format_datetime(f"{date} 00:00").split(',')[0]

    text = (
        "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n"
        f"üíÖ –£—Å–ª—É–≥–∞: {service['name']}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(service['price'])}\n"
        f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {time_slot}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
        f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment}\n"
        f"üí≥ –û–ø–ª–∞—Ç–∞: {payment}"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_salon_booking")],
        [InlineKeyboardButton("‚óÄÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="salon_booking")]
    ]

    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    return SALON_CONFIRM


async def salon_confirm_booking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ - —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏"""

    query = update.callback_query
    await query.answer()

    user = update.effective_user
    service = context.user_data.get('salon_service')
    date = context.user_data.get('salon_date')
    time_slot = context.user_data.get('salon_time')
    phone = context.user_data.get('salon_phone')
    comment = context.user_data.get('salon_comment', '')
    payment = context.user_data.get('salon_payment')

    try:
        # –°–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î
        prepaid = False if payment == "–ù–∞ –º–µ—Å—Ç–µ" else True

        appointment_id = add_salon_appointment(
            user_id=user.id,
            user_name=user.first_name,
            phone=phone,
            service_id=service['id'],
            service_name=service['name'],
            appointment_date=date,
            time_slot=time_slot,
            prepaid=prepaid,
            comment=comment
        )

        if not appointment_id:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –≤ –ë–î")

        # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–∑—ã–≤
        schedule_feedback_request(user.id, 'appointment', appointment_id)

        # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å
        try:
            check_and_award_referral_bonus(appointment_id, user.id, service['price'])
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –¥–ª—è –∑–∞–ø–∏—Å–∏ #{appointment_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞: {e}")

        # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–Ω–≤–µ—Ä—Å–∏–π UTM
        try:
            user_data = get_user(user.id)
            if user_data and len(user_data) > 9 and user_data[9]:  # utm_source exists
                utm_code = f"{user_data[9]}__{user_data[10] or ''}__{user_data[11] or ''}__{user_data[12] or ''}__{user_data[13] or ''}"
                update_utm_campaign_stats(utm_code, 'conversion', service['price'])
                logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ UTM-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Å–∏–∏: {utm_code}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UTM-—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

        # –°–æ–∑–¥–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã
        formatted_date = format_datetime(f"{date} {time_slot.split('-')[0]}:00")

        admin_text = (
            "üÜï <b>–ù–û–í–ê–Ø –ó–ê–ü–ò–°–¨ –í –°–ê–õ–û–ù</b>\n\n"
            f"üìã –ù–æ–º–µ—Ä: #{appointment_id}\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {user.first_name}"
        )

        if user.username:
            admin_text += f" (@{user.username})"

        admin_text += (
            f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
            f"üíÖ –£—Å–ª—É–≥–∞: {service['name']}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {format_price(service['price'])}\n"
            f"üìÖ –î–∞—Ç–∞: {formatted_date}\n"
            f"‚è∞ –ñ–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è: {time_slot}\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {comment or '–Ω–µ—Ç'}\n\n"
            f"üí≥ –û–ø–ª–∞—Ç–∞: {payment}"
        )

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
        await send_to_user_topic(
            context,
            user.id,
            user.first_name,
            admin_text,
            None
        )

        # TODO: –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–¥–µ–ª–∞–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–∞—Ö)

        # –û—Ç–≤–µ—Ç–∏—Ç—å –∫–ª–∏–µ–Ω—Ç—É
        await query.edit_message_text(
            f"üéâ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"–ù–æ–º–µ—Ä –∑–∞–ø–∏—Å–∏: #{appointment_id}\n\n"
            f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.\n\n"
            f"–ó–∞ 2 —á–∞—Å–∞ –¥–æ –≤–∏–∑–∏—Ç–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

        # –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()

        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å #{appointment_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {e}")
        await query.edit_message_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return ConversationHandler.END
