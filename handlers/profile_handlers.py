"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π, –∑–∞–∫–∞–∑–æ–≤, –∞–¥—Ä–µ—Å–∞, –±–æ–Ω—É—Å—ã, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from database import (
    get_user, get_addresses, get_bonus_balance,
    get_loyalty_transactions, count_referrals, set_default_address, delete_address,
    get_salon_appointments, get_flower_orders, is_profile_filled, update_user_profile,
    get_user_active_subscription
)
from utils.helpers import format_price, format_datetime
from config import ADMIN_ID

logger = logging.getLogger(__name__)


async def profile_view(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    query = update.callback_query
    await query.answer()

    user = update.effective_user
    user_data = get_user(user.id)

    if not user_data:
        await query.edit_message_text(
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
        )
        return

    bonus_balance = get_bonus_balance(user.id)
    referral_code = user_data[6] if len(user_data) > 6 else "–ù–µ—Ç"
    referrals_count = count_referrals(user.id)

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è birthday
    birthday = None
    if len(user_data) > 16:  # birthday –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ—Å–ª–µ profile_filled
        birthday = user_data[16]

    # –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
    active_sub = get_user_active_subscription(user.id)

    text = (
        "üë§ –ú–û–ô –ü–†–û–§–ò–õ–¨\n\n"
        f"–ò–º—è: {user.first_name}\n"
    )

    if user.username:
        text += f"Telegram: @{user.username}\n"

    if user_data[3]:  # phone
        text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {user_data[3]}\n"

    if birthday:
        text += f"üéÇ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday}\n"

    text += f"\nüéÅ –ë–æ–Ω—É—Å–æ–≤: {bonus_balance}\n"

    # –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
    if active_sub:
        text += f"üíé –ü–æ–¥–ø–∏—Å–∫–∞: {active_sub['plan_name']}\n"
        text += f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {active_sub['end_date']}\n"

        # –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∫—Ä–∞—Ç–∫–æ
        if active_sub['monthly_flowers_included'] > 0:
            used = active_sub['flowers_used_this_month']
            total = active_sub['monthly_flowers_included']
            text += f"üåπ –ë—É–∫–µ—Ç–æ–≤: {total - used}/{total}\n"

        if active_sub['monthly_service_included'] and not active_sub['service_used_this_month']:
            text += f"üíÖ –£—Å–ª—É–≥–∞: –î–æ—Å—Ç—É–ø–Ω–∞\n"

    text += (
        f"\nüíé –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}\n"
        f"üë• –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}"
    )

    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏", callback_data="profile_appointments")],
        [InlineKeyboardButton("üõçÔ∏è –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="profile_orders")],
        [InlineKeyboardButton("üìç –ú–æ–∏ –∞–¥—Ä–µ—Å–∞", callback_data="profile_addresses")],
        [InlineKeyboardButton("üéÅ –ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤", callback_data="profile_bonuses")],
        [InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞", callback_data="profile_referral")],
    ]

    # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞" –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è
    if active_sub:
        keyboard.append([InlineKeyboardButton("üíé –ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞", callback_data="subscriptions")])

    # –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω
    if not is_profile_filled(user.id):
        keyboard.append([InlineKeyboardButton("‚úèÔ∏è –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile_edit")])

    keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def profile_view_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        appointments = get_salon_appointments(user_id=user_id)

        if not appointments:
            text = "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Å–∞–ª–æ–Ω"
        else:
            # –†–∞–∑–¥–µ–ª–∏—Ç—å –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
            active = [a for a in appointments if a.get('status') in ['pending', 'confirmed']]
            completed = [a for a in appointments if a.get('status') == 'completed']

            text = "üìã –ú–û–ò –ó–ê–ü–ò–°–ò\n\n"

            if active:
                text += "–ê–∫—Ç–∏–≤–Ω—ã–µ:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                for appt in active[:5]:
                    status_emoji = "‚úÖ" if appt.get('status') == 'confirmed' else "‚è≥"
                    date_time = f"{appt.get('appointment_date')} {appt.get('time_slot')}"
                    text += (
                        f"#{appt.get('id')} | {date_time}\n"
                        f"üíÖ {appt.get('service_name')}\n"
                        f"–°—Ç–∞—Ç—É—Å: {status_emoji}\n\n"
                    )

            if completed:
                text += "\n–ò—Å—Ç–æ—Ä–∏—è:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                for appt in completed[:3]:
                    date_time = f"{appt.get('appointment_date')} {appt.get('time_slot')}"
                    text += (
                        f"#{appt.get('id')} | {date_time}\n"
                        f"üíÖ {appt.get('service_name')} ‚úÖ\n\n"
                    )

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–ø–∏—Å–µ–π: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–ø–∏—Å–µ–π",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")
            ]])
        )


async def profile_view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã —Ü–≤–µ—Ç–æ–≤"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    try:
        # –ü–æ–ª—É—á–∏—Ç—å –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
        orders = get_flower_orders(user_id=user_id)

        if not orders:
            text = "üõçÔ∏è –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤"
        else:
            active = [o for o in orders if o.get('status') in ['new', 'processing']]
            completed = [o for o in orders if o.get('status') == 'completed']

            text = "üõçÔ∏è –ú–û–ò –ó–ê–ö–ê–ó–´\n\n"

            if active:
                text += "–ê–∫—Ç–∏–≤–Ω—ã–µ:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                for order in active[:5]:
                    items_text = order.get('items', '')[:40]
                    text += (
                        f"#{order.get('id')} | {order.get('created_at', '')[:10]}\n"
                        f"üíê {items_text}...\n"
                        f"üíµ {format_price(order.get('total_amount', 0))}\n"
                        f"–°—Ç–∞—Ç—É—Å: üîÑ\n\n"
                    )

            if completed:
                text += "\n–ò—Å—Ç–æ—Ä–∏—è:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                for order in completed[:3]:
                    items_text = order.get('items', '')[:40]
                    text += (
                        f"#{order.get('id')} | {order.get('created_at', '')[:10]}\n"
                        f"üíê {items_text}...\n"
                        f"üíµ {format_price(order.get('total_amount', 0))} ‚úÖ\n\n"
                    )

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]

        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")
            ]])
        )


async def profile_view_addresses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞–º–∏"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    addresses = get_addresses(user_id)

    if not addresses:
        text = "üìç –£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤"
        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]
    else:
        text = "üìç –ú–û–ò –ê–î–†–ï–°–ê\n\n"
        keyboard = []

        for addr_id, address, is_default in addresses:
            prefix = "‚úÖ " if is_default else "   "
            text += f"{prefix}{address}\n\n"

            buttons = []
            if not is_default:
                buttons.append(InlineKeyboardButton(
                    "–°–¥–µ–ª–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–º",
                    callback_data=f"set_default_addr_{addr_id}"
                ))
            buttons.append(InlineKeyboardButton(
                "üóëÔ∏è",
                callback_data=f"delete_addr_{addr_id}"
            ))
            keyboard.append(buttons)

        keyboard.append([InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")])

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def profile_set_default_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–π –∞–¥—Ä–µ—Å"""

    query = update.callback_query
    await query.answer()

    addr_id = int(query.data.replace("set_default_addr_", ""))
    user_id = update.effective_user.id

    try:
        set_default_address(user_id, addr_id)
        await query.answer("‚úÖ –ê–¥—Ä–µ—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Å–Ω–æ–≤–Ω—ã–º", show_alert=True)
        return await profile_view_addresses(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–¥—Ä–µ—Å–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def profile_delete_address(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–£–¥–∞–ª–∏—Ç—å –∞–¥—Ä–µ—Å"""

    query = update.callback_query
    await query.answer()

    addr_id = int(query.data.replace("delete_addr_", ""))

    try:
        delete_address(addr_id)
        await query.answer("‚úÖ –ê–¥—Ä–µ—Å —É–¥–∞–ª–µ–Ω", show_alert=True)
        return await profile_view_addresses(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: {e}")
        await query.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)


async def profile_view_bonuses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ò—Å—Ç–æ—Ä–∏—è –±–æ–Ω—É—Å–æ–≤"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    balance = get_bonus_balance(user_id)
    transactions = get_loyalty_transactions(user_id, limit=10)

    text = f"üéÅ –ë–û–ù–£–°–´\n\n–í–∞—à –±–∞–ª–∞–Ω—Å: {balance}\n\n1 –±–æ–Ω—É—Å = 1 —Ä—É–±–ª—å\n\n"

    if transactions:
        text += "–ò—Å—Ç–æ—Ä–∏—è:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        for points, description, created_at in transactions:
            sign = "+" if points > 0 else ""
            text += f"{sign}{points} | {description}\n"
    else:
        text += "–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞"

    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )


async def profile_view_referral(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞"""

    query = update.callback_query
    await query.answer()

    user = update.effective_user
    user_data = get_user(user.id)
    referral_code = user_data[6] if len(user_data) > 6 else "–ù–µ—Ç"
    referrals_count = count_referrals(user.id)

    text = (
        "üë• –ü–†–ò–ì–õ–ê–°–ò –î–†–£–ì–ê\n\n"
        f"–¢–≤–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥: {referral_code}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å –∫–æ–¥ –¥—Ä—É–≥—É, –∏ –∫–æ–≥–¥–∞ –æ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è:\n"
        "üéÅ –¢—ã –ø–æ–ª—É—á–∏—à—å: 500 –±–æ–Ω—É—Å–æ–≤\n"
        "üéÅ –î—Ä—É–≥ –ø–æ–ª—É—á–∏—Ç: 500 –±–æ–Ω—É—Å–æ–≤\n\n"
        f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ –¥—Ä—É–∑–µ–π: {referrals_count}\n"
        f"–ü–æ–ª—É—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {referrals_count * 500}\n\n"
        "–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"t.me/your_bot_username?start={referral_code}"
    )

    keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")]]

    await query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# ============================================================================
# –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–†–û–§–ò–õ–Ø (—Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑)
# ============================================================================

from telegram.ext import ConversationHandler

EDIT_NAME, EDIT_PHONE, EDIT_BIRTHDAY = range(3)


async def profile_edit_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""

    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª –ª–∏ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å
    if is_profile_filled(user_id):
        await query.edit_message_text(
            "‚ùå –í—ã —É–∂–µ –∑–∞–ø–æ–ª–Ω—è–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="profile")
            ]])
        )
        return ConversationHandler.END

    await query.edit_message_text(
        "‚úèÔ∏è –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ü–†–û–§–ò–õ–Ø\n\n"
        "–≠—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile_edit_cancel")
        ]])
    )

    return EDIT_NAME


async def profile_edit_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–º—è"""

    name = update.message.text.strip()

    if len(name) < 2:
        await update.message.reply_text(
            "‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile_edit_cancel")
            ]])
        )
        return EDIT_NAME

    context.user_data['edit_name'] = name

    await update.message.reply_text(
        f"‚úÖ –ò–º—è: {name}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "(–Ω–∞–ø—Ä–∏–º–µ—Ä: +7 900 123-45-67):",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile_edit_cancel")
        ]])
    )

    return EDIT_PHONE


async def profile_edit_phone(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω"""

    phone = update.message.text.strip()

    # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞
    if len(phone) < 10:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile_edit_cancel")
            ]])
        )
        return EDIT_PHONE

    context.user_data['edit_phone'] = phone

    await update.message.reply_text(
        f"‚úÖ –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è\n"
        "(—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì, –Ω–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990):",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile_edit_cancel")
        ]])
    )

    return EDIT_BIRTHDAY


async def profile_edit_birthday(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"""

    birthday_text = update.message.text.strip()

    # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
    try:
        from datetime import datetime

        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
        for fmt in ['%d.%m.%Y', '%d/%m/%Y', '%d-%m-%Y']:
            try:
                birthday_date = datetime.strptime(birthday_text, fmt)
                break
            except:
                continue
        else:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –≤ ISO —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ë–î
        birthday_iso = birthday_date.strftime('%Y-%m-%d')

    except:
        await update.message.reply_text(
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.03.1990\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="profile_edit_cancel")
            ]])
        )
        return EDIT_BIRTHDAY

    # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    user_id = update.effective_user.id
    name = context.user_data.get('edit_name')
    phone = context.user_data.get('edit_phone')

    success = update_user_profile(
        user_id=user_id,
        first_name=name,
        phone=phone,
        birthday=birthday_iso
    )

    if success:
        await update.message.reply_text(
            "‚úÖ –ü–†–û–§–ò–õ–¨ –£–°–ü–ï–®–ù–û –ó–ê–ü–û–õ–ù–ï–ù!\n\n"
            f"–ò–º—è: {name}\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
            f"–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è: {birthday_text}\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            ]])
        )
    else:
        await update.message.reply_text(
            "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
            ]])
        )

    # –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('edit_name', None)
    context.user_data.pop('edit_phone', None)

    return ConversationHandler.END


async def profile_edit_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""

    query = update.callback_query
    await query.answer()

    # –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    context.user_data.pop('edit_name', None)
    context.user_data.pop('edit_phone', None)

    await query.edit_message_text(
        "‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data="profile")
        ]])
    )

    return ConversationHandler.END
