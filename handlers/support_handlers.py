"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import SUPPORT_MESSAGE, SUPPORT_CONVERSATION, ADMIN_GROUP_ID

logger = logging.getLogger(__name__)


async def send_reminder_if_not_responded(context: ContextTypes.DEFAULT_TYPE):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ —Ç–æ–ø–∏–∫ –µ—Å–ª–∏ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 3 –º–∏–Ω—É—Ç.
    """
    job = context.job
    data = job.data

    user_id = data['user_id']
    thread_id = data['thread_id']
    user_name = data['user_name']

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ç–≤–µ—Ç–∏–ª–∏ –ª–∏ —É–∂–µ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
    user_topics = context.bot_data.get('user_topics', {})
    topic_data = user_topics.get(user_id)

    if not topic_data or not isinstance(topic_data, dict):
        return

    # –ï—Å–ª–∏ —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ - –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    if topic_data.get('responded'):
        logger.info(f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ - —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        return

    try:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫
        reminder_text = (
            "‚ö†Ô∏è <b>–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï</b>\n\n"
            f"–û–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{user_name}</b> –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç–∞ —É–∂–µ 3 –º–∏–Ω—É—Ç—ã!\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –∫–ª–∏–µ–Ω—Ç—É –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ."
        )

        await context.bot.send_message(
            chat_id=ADMIN_GROUP_ID,
            message_thread_id=thread_id,
            text=reminder_text,
            parse_mode='HTML'
        )

        logger.info(f"‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫ {thread_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")


async def handle_admin_reply(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–∑ —Ç–æ–ø–∏–∫–∞ –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ.
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø—ã
    if not update.message or update.message.chat.id != ADMIN_GROUP_ID:
        return

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–æ–ø–∏–∫–µ
    if not update.message.message_thread_id:
        return

    try:
        # –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–ø–∏–∫—É
        user_topics = context.bot_data.get('user_topics', {})

        # –ù–∞–π—Ç–∏ user_id –ø–æ message_thread_id
        user_id = None
        for uid, topic_data in user_topics.items():
            if isinstance(topic_data, dict):
                if topic_data.get('thread_id') == update.message.message_thread_id:
                    user_id = uid
                    break

        if not user_id:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ç–æ–ø–∏–∫–∞ {update.message.message_thread_id}")
            return

        # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤—ã–π –æ—Ç–≤–µ—Ç - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫ –∏ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
        topic_data = user_topics.get(user_id)
        if isinstance(topic_data, dict) and not topic_data.get('responded'):
            try:
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–æ–ø–∏–∫ –≤ "‚úÖ –ò–º—è"
                new_topic_name = f"‚úÖ {topic_data.get('user_name', '–ö–ª–∏–µ–Ω—Ç')}"
                await context.bot.edit_forum_topic(
                    chat_id=ADMIN_GROUP_ID,
                    message_thread_id=update.message.message_thread_id,
                    name=new_topic_name
                )

                # –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                topic_data['responded'] = True
                topic_data['status'] = 'in_progress'
                user_topics[user_id] = topic_data

                logger.info(f"‚úÖ –¢–æ–ø–∏–∫ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤ '{new_topic_name}'")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è —Ç–æ–ø–∏–∫–∞: {e}")

        # –ü–µ—Ä–µ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        admin_text = update.message.text or update.message.caption or ""

        if admin_text:
            message_text = f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{admin_text}"

            await context.bot.send_message(
                chat_id=user_id,
                text=message_text,
                parse_mode='HTML'
            )

            logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, –ø–µ—Ä–µ—Å–ª–∞—Ç—å –µ–≥–æ
        if update.message.photo:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=update.message.photo[-1].file_id,
                caption=f"üí¨ <b>–û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏:</b>\n\n{admin_text}" if admin_text else "üí¨ –û—Ç–≤–µ—Ç –æ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∏",
                parse_mode='HTML'
            )
            logger.info(f"‚úÖ –§–æ—Ç–æ –æ—Ç –∞–¥–º–∏–Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")


async def support_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""

    query = update.callback_query
    await query.answer()

    await query.edit_message_text(
        "üí¨ –ß–ê–¢ –° –ü–û–î–î–ï–†–ñ–ö–û–ô\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: 15 –º–∏–Ω—É—Ç\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö/—É—Å–ª—É–≥–∞—Ö\n"
        "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n"
        "‚Ä¢ –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:"
    )

    return SUPPORT_MESSAGE


async def support_send_message(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É"""

    user = update.effective_user
    message = update.message.text

    try:
        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∞–¥–º–∏–Ω-–≥—Ä—É–ø–ø–µ
        if ADMIN_GROUP_ID:
            from database import get_user
            from utils.helpers import send_to_user_topic

            user_data = get_user(user.id)
            phone = user_data[3] if user_data and user_data[3] else "–ù–µ —É–∫–∞–∑–∞–Ω"

            topic_text = (
                "üí¨ <b>–û–ë–†–ê–©–ï–ù–ò–ï –í –ü–û–î–î–ï–†–ñ–ö–£</b>\n\n"
                f"üë§ –û—Ç: {user.first_name}"
            )

            if user.username:
                topic_text += f" (@{user.username})"

            topic_text += (
                f"\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"üÜî User ID: {user.id}\n\n"
                f"–°–æ–æ–±—â–µ–Ω–∏–µ:\n{message}"
            )

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
            result = await send_to_user_topic(
                context,
                user.id,
                user.first_name,
                topic_text,
                None
            )

            # –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π —Ç–æ–ø–∏–∫ - –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if result and result.get('is_new_topic'):
                # –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã
                context.job_queue.run_once(
                    send_reminder_if_not_responded,
                    when=180,  # 3 –º–∏–Ω—É—Ç—ã = 180 —Å–µ–∫—É–Ω–¥
                    data={
                        'user_id': user.id,
                        'thread_id': result['thread_id'],
                        'user_name': user.first_name
                    },
                    name=f"reminder_{user.id}"
                )
                logger.info(f"‚è∞ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 3 –º–∏–Ω—É—Ç—ã –¥–ª—è user_id={user.id}")

        await update.message.reply_text(
            "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n"
            "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )

        logger.info(f"–û–±—Ä–∞—â–µ–Ω–∏–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É –æ—Ç {user.id}")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")
            ]])
        )
        return ConversationHandler.END
