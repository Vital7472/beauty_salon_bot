"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.
–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π, –∑–∞–∫–∞–∑–æ–≤, –æ—Ç–∑—ã–≤–æ–≤, —Ä–∞—Å—Å—ã–ª–∫–∞.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import ADMIN_ID, ADMIN_BROADCAST_TEXT, ADMIN_BROADCAST_CONFIRM
from database import get_all_users, get_salon_appointments, get_flower_orders, get_reviews
from utils.helpers import format_price

logger = logging.getLogger(__name__)


async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
    if update.effective_user.id != ADMIN_ID:
        if update.message:
            await update.message.reply_text("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return

    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω", callback_data="admin_appointments")],
        [InlineKeyboardButton("üíê –ó–∞–∫–∞–∑—ã —Ü–≤–µ—Ç–æ–≤", callback_data="admin_orders")],
        [InlineKeyboardButton("üé´ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", callback_data="admin_certificates")],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data="admin_reviews")],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

    text = "üë®‚Äçüíº –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))


async def admin_view_appointments(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–ø–∏—Å–µ–π –≤ —Å–∞–ª–æ–Ω"""

    query = update.callback_query
    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        appointments = get_salon_appointments()

        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        today_count = 0
        pending_count = 0

        for appt in appointments:
            if appt.get('status') == 'pending':
                pending_count += 1

        text = (
            "üìã –ó–ê–ü–ò–°–ò –í –°–ê–õ–û–ù\n\n"
            f"–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {pending_count}\n"
            f"–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(appointments)}\n\n"
        )

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –æ–∂–∏–¥–∞—é—â–∏—Ö
        pending = [a for a in appointments if a.get('status') == 'pending'][:5]

        if pending:
            text += "–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            for appt in pending:
                date_time = f"{appt.get('appointment_date')} {appt.get('time_slot')}"
                text += (
                    f"#{appt.get('id')} | {date_time}\n"
                    f"üíÖ {appt.get('service_name')}\n"
                    f"üë§ {appt.get('user_name')} ({appt.get('phone')})\n\n"
                )

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]

        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]])
        )


async def admin_view_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ —Ü–≤–µ—Ç–æ–≤"""

    query = update.callback_query
    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        orders = get_flower_orders()

        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        new_count = len([o for o in orders if o.get('status') == 'new'])
        processing_count = len([o for o in orders if o.get('status') == 'processing'])

        text = (
            "üíê –ó–ê–ö–ê–ó–´ –¶–í–ï–¢–û–í\n\n"
            f"–ù–æ–≤—ã–µ: {new_count}\n"
            f"–í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {processing_count}\n"
            f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}\n\n"
        )

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –Ω–æ–≤—ã—Ö
        new_orders = [o for o in orders if o.get('status') == 'new'][:5]

        if new_orders:
            text += "–ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            for order in new_orders:
                items_text = order.get('items', '')[:40]
                text += (
                    f"#{order.get('id')} | {order.get('created_at', '')[:10]}\n"
                    f"üíê {items_text}...\n"
                    f"üíµ {format_price(order.get('total_amount', 0))}\n"
                    f"üë§ {order.get('user_name')}\n\n"
                )

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]

        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–∫–∞–∑–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]])
        )


async def admin_view_reviews(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç–∑—ã–≤–æ–≤"""

    query = update.callback_query
    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return

    try:
        reviews = get_reviews()

        # –ü–æ–¥—Å—á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        positive = [r for r in reviews if r.get('rating', 0) >= 4]
        negative = [r for r in reviews if r.get('rating', 0) <= 3]

        text = (
            "‚≠ê –û–¢–ó–´–í–´\n\n"
            f"–ü–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ (4-5‚≠ê): {len(positive)}\n"
            f"–ù–µ–≥–∞—Ç–∏–≤–Ω—ã–µ (1-3‚≠ê): {len(negative)}\n"
            f"–í—Å–µ–≥–æ –æ—Ç–∑—ã–≤–æ–≤: {len(reviews)}\n\n"
        )

        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –æ—Ç–∑—ã–≤–∞
        recent = reviews[:3]

        if recent:
            text += "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç–∑—ã–≤—ã:\n‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            for review in recent:
                rating = review.get('rating', 0)
                text += (
                    f"{'‚≠ê' * rating} | {review.get('created_at', '')[:10]}\n"
                    f"–û—Ç: {review.get('user_name', '–ê–Ω–æ–Ω–∏–º')}\n"
                )
                if review.get('text'):
                    text += f"\"{review.get('text')[:50]}...\"\n"
                text += "\n"

        keyboard = [[InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")]]

        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")
            ]])
        )


async def admin_broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    query = update.callback_query
    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return ConversationHandler.END

    await query.edit_message_text(
        "üì¢ –†–ê–°–°–´–õ–ö–ê\n\n"
        "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –í–°–ï–ú –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:"
    )

    return ADMIN_BROADCAST_TEXT


async def admin_broadcast_enter_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    text = update.message.text
    context.user_data['broadcast_text'] = text

    # –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    users = get_all_users()
    user_count = len(users)

    keyboard = [
        [InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data="confirm_broadcast")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="admin_panel")]
    ]

    await update.message.reply_text(
        f"üì¢ –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä:\n\n{text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å: {user_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return ADMIN_BROADCAST_CONFIRM


async def admin_broadcast_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""

    query = update.callback_query
    await query.answer()

    if update.effective_user.id != ADMIN_ID:
        await query.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return ConversationHandler.END

    broadcast_text = context.user_data.get('broadcast_text')
    users = get_all_users()

    await query.edit_message_text("üì§ –û—Ç–ø—Ä–∞–≤–∫–∞...")

    sent = 0
    failed = 0

    for user_id in users:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text=broadcast_text
            )
            sent += 1
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            failed += 1

    await query.edit_message_text(
        f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent}\n"
        f"–û—à–∏–±–æ–∫: {failed}",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("üè† –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="admin_panel")
        ]])
    )

    context.user_data.clear()
    logger.info(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {sent} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, {failed} –æ—à–∏–±–æ–∫")

    return ConversationHandler.END
