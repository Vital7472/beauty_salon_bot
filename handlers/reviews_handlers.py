"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–∑—ã–≤–æ–≤.
–û—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤ —Å —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º.
"""

import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from config import REVIEW_RATING, REVIEW_TEXT, REVIEW_LINKS
from database import add_review
from utils.helpers import send_to_user_topic

logger = logging.getLogger(__name__)


async def review_start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞"""

    query = update.callback_query
    await query.answer()

    context.user_data.clear()

    keyboard = [
        [
            InlineKeyboardButton("‚≠ê", callback_data="rating_1"),
            InlineKeyboardButton("‚≠ê‚≠ê", callback_data="rating_2"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê", callback_data="rating_3")
        ],
        [
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_4"),
            InlineKeyboardButton("‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê", callback_data="rating_5")
        ],
        [InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")]
    ]

    await query.edit_message_text(
        "‚≠ê –û–°–¢–ê–í–ò–¢–¨ –û–¢–ó–´–í\n\n–û—Ü–µ–Ω–∏—Ç–µ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return REVIEW_RATING


async def review_select_rating(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞"""

    query = update.callback_query
    await query.answer()

    rating = int(query.data.replace("rating_", ""))
    context.user_data['review_rating'] = rating

    keyboard = [[InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip_review_text")]]

    await query.edit_message_text(
        "‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–∞—à–µ–º –æ–ø—ã—Ç–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n\n"
        "–ß—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ß—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å?",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

    return REVIEW_TEXT


async def review_enter_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""

    text = update.message.text.strip()
    context.user_data['review_text'] = text

    return await review_submit(update, context)


async def review_skip_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—Å—Ç–∞ –æ—Ç–∑—ã–≤–∞"""

    query = update.callback_query
    await query.answer()

    context.user_data['review_text'] = ""

    return await review_submit(update, context)


async def review_submit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–∑—ã–≤–∞"""

    user = update.effective_user
    rating = context.user_data.get('review_rating')
    text = context.user_data.get('review_text', '')

    try:
        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î
        add_review(user.id, user.first_name, rating, text)

        # –ï—Å–ª–∏ 4-5 –∑–≤–µ–∑–¥ - –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö
        if rating >= 4:
            response_text = (
                "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤!\n\n"
                "‚≠ê –†–∞–¥—ã, —á—Ç–æ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å!\n\n"
                "–ë—É–¥–µ–º –±–ª–∞–≥–æ–¥–∞—Ä–Ω—ã, –µ—Å–ª–∏ –≤—ã –æ—Å—Ç–∞–≤–∏—Ç–µ –æ—Ç–∑—ã–≤ –Ω–∞ –ø–ª–æ—â–∞–¥–∫–∞—Ö:"
            )

            keyboard = []
            if REVIEW_LINKS.get('yandex'):
                keyboard.append([InlineKeyboardButton("üìù –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã", url=REVIEW_LINKS['yandex'])])
            if REVIEW_LINKS.get('2gis'):
                keyboard.append([InlineKeyboardButton("üìù 2–ì–ò–°", url=REVIEW_LINKS['2gis'])])
            if REVIEW_LINKS.get('google'):
                keyboard.append([InlineKeyboardButton("üìù Google Maps", url=REVIEW_LINKS['google'])])

            keyboard.append([InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])

            # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤)
            admin_text = (
                "‚úÖ <b>–ü–û–õ–û–ñ–ò–¢–ï–õ–¨–ù–´–ô –û–¢–ó–´–í</b>\n\n"
                f"–û—Ç: {user.first_name}"
            )
            if user.username:
                admin_text += f" (@{user.username})"
            admin_text += f"\n–†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * rating}\n"
            if text:
                admin_text += f"–¢–µ–∫—Å—Ç: {text}"

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await send_to_user_topic(context, user.id, user.first_name, admin_text, None)

        else:
            # 1-3 –∑–≤–µ–∑–¥—ã - –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤
            response_text = (
                "üòî –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –Ω–µ–¥–æ–≤–æ–ª—å–Ω—ã\n\n"
                "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è "
                "–¥–ª—è —Ä–µ—à–µ–Ω–∏—è —Å–∏—Ç—É–∞—Ü–∏–∏.\n\n"
                "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç–µ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ!"
            )

            keyboard = [[InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]]

            # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞ (–Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤)
            from database import get_user
            user_data = get_user(user.id)
            phone = user_data[3] if user_data and user_data[3] else "–ù–µ —É–∫–∞–∑–∞–Ω"

            admin_text = (
                "‚ö†Ô∏è <b>–ù–ï–ì–ê–¢–ò–í–ù–´–ô –û–¢–ó–´–í</b>\n\n"
                f"–û—Ç: {user.first_name}"
            )
            if user.username:
                admin_text += f" (@{user.username})"
            admin_text += (
                f"\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n"
                f"–†–µ–π—Ç–∏–Ω–≥: {'‚≠ê' * rating}\n"
            )
            if text:
                admin_text += f"–¢–µ–∫—Å—Ç: {text}\n"
            admin_text += "\n‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–≤—è–∑–∞—Ç—å—Å—è —Å –∫–ª–∏–µ–Ω—Ç–æ–º!"

            # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–≥–∞—Ç–∏–≤–Ω—ã–π –æ—Ç–∑—ã–≤ –≤ —Ç–æ–ø–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
            await send_to_user_topic(context, user.id, user.first_name, admin_text, None)

        if update.message:
            await update.message.reply_text(
                response_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )
        else:
            await update.callback_query.edit_message_text(
                response_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='HTML'
            )

        context.user_data.clear()
        logger.info(f"–û—Ç–∑—ã–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}, —Ä–µ–π—Ç–∏–Ω–≥ {rating}")

        return ConversationHandler.END

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞: {e}")
        text = "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]])

        if update.message:
            await update.message.reply_text(text, reply_markup=keyboard)
        else:
            await update.callback_query.edit_message_text(text, reply_markup=keyboard)

        return ConversationHandler.END
