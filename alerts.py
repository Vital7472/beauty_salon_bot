"""
üö® –°–ò–°–¢–ï–ú–ê –ê–õ–ï–†–¢–û–í –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ô
–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
"""

import asyncio
from datetime import datetime, timedelta
from telegram import Bot
from telegram.constants import ParseMode
from config import TELEGRAM_BOT_TOKEN, ADMIN_ID
from database import get_connection

async def send_alert(message: str, emoji: str = "‚ö†Ô∏è"):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ä–æ—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É"""
    try:
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        alert_text = f"{emoji} <b>–°–†–û–ß–ù–û!</b>\n\n{message}"
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=alert_text,
            parse_mode=ParseMode.HTML
        )
        print(f"‚úÖ –ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω: {message[:50]}...")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞: {e}")


async def check_critical_alerts():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–ª–µ—Ä—Ç—ã"""

    conn = get_connection()
    cursor = conn.cursor()
    today = datetime.now().date()

    alerts = []

    # ========================================
    # 1. –§–ò–ù–ê–ù–°–û–í–´–ï –ê–õ–ï–†–¢–´
    # ========================================

    # –í—ã—Ä—É—á–∫–∞ —É–ø–∞–ª–∞ –±–æ–ª–µ–µ —á–µ–º –Ω–∞ 50% –ø–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—é —Å–æ –≤—á–µ—Ä–∞
    cursor.execute("""
        SELECT
            (SELECT COALESCE(SUM(total_amount), 0)
             FROM flower_orders
             WHERE DATE(created_at) = DATE('now', '-1 day') AND status = 'completed') as yesterday,
            (SELECT COALESCE(SUM(total_amount), 0)
             FROM flower_orders
             WHERE DATE(created_at) = DATE('now') AND status = 'completed') as today
    """)
    row = cursor.fetchone()
    if row[0] > 0 and row[1] < row[0] * 0.5:
        alerts.append({
            'emoji': 'üìâ',
            'message': f"<b>–ü–∞–¥–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏!</b>\n\n–í—á–µ—Ä–∞: {row[0]:,}‚ÇΩ\n–°–µ–≥–æ–¥–Ω—è: {row[1]:,}‚ÇΩ\n–ü–∞–¥–µ–Ω–∏–µ: {(1 - row[1]/row[0])*100:.0f}%"
        })

    # –ú–Ω–æ–≥–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ (>10 –∑–∞ –¥–µ–Ω—å)
    cursor.execute("""
        SELECT COUNT(*) FROM flower_orders
        WHERE DATE(created_at) = ? AND status = 'pending'
    """, (today,))
    pending = cursor.fetchone()[0]
    if pending > 10:
        alerts.append({
            'emoji': 'üí∏',
            'message': f"<b>–ú–Ω–æ–≥–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!</b>\n\n{pending} –∑–∞–∫–∞–∑–æ–≤ –≤ —Å—Ç–∞—Ç—É—Å–µ '–æ–∂–∏–¥–∞–Ω–∏–µ'\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–ª–∞—Ç–µ–∂–µ–π."
        })

    # ========================================
    # 2. –û–ü–ï–†–ê–¶–ò–û–ù–ù–´–ï –ê–õ–ï–†–¢–´
    # ========================================

    # –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π —É–∂–µ 2 –¥–Ω—è
    cursor.execute("""
        SELECT COUNT(*) FROM users
        WHERE DATE(registration_date) >= DATE('now', '-2 days')
    """)
    if cursor.fetchone()[0] == 0:
        alerts.append({
            'emoji': 'üö´',
            'message': "<b>–ù–µ—Ç –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>\n\n–£–∂–µ 2 –¥–Ω—è –Ω–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–ª–∞–º—É –∏ –∫–∞–Ω–∞–ª—ã –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è."
        })

    # –ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π (>30% –æ—Ç –æ–±—â–µ–≥–æ —á–∏—Å–ª–∞ –∑–∞ –¥–µ–Ω—å)
    cursor.execute("""
        SELECT
            COUNT(*) as total,
            SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled
        FROM salon_appointments
        WHERE DATE(appointment_date) = ?
    """, (today,))
    row = cursor.fetchone()
    if row[0] > 0 and row[1] / row[0] > 0.3:
        alerts.append({
            'emoji': '‚ùå',
            'message': f"<b>–í—ã—Å–æ–∫–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç–º–µ–Ω!</b>\n\n–û—Ç–º–µ–Ω–µ–Ω–æ: {row[1]}/{row[0]} ({row[1]/row[0]*100:.0f}%)\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è."
        })

    # ========================================
    # 3. –ú–ê–†–ö–ï–¢–ò–ù–ì–û–í–´–ï –ê–õ–ï–†–¢–´
    # ========================================

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (0 —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é)
    cursor.execute("""
        SELECT COUNT(*) FROM users
        WHERE DATE(registration_date) >= DATE('now', '-7 days')
        AND referred_by IS NOT NULL
    """)
    if cursor.fetchone()[0] == 0:
        alerts.append({
            'emoji': 'üë•',
            'message': "<b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n\n–ó–∞ –Ω–µ–¥–µ–ª—é 0 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–º —Å—Å—ã–ª–∫–∞–º.\n\n–ù–∞–ø–æ–º–Ω–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞–º –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ."
        })

    # UTM-–∫–∞–º–ø–∞–Ω–∏–∏ –Ω–µ –¥–∞—é—Ç –∫–æ–Ω–≤–µ—Ä—Å–∏–π
    cursor.execute("""
        SELECT name FROM utm_campaigns
        WHERE clicks > 100 AND conversions = 0
        AND created_at >= DATE('now', '-7 days')
    """)
    bad_campaigns = cursor.fetchall()
    if bad_campaigns:
        campaign_names = ", ".join([c[0] for c in bad_campaigns])
        alerts.append({
            'emoji': 'üì¢',
            'message': f"<b>–ö–∞–º–ø–∞–Ω–∏–∏ –±–µ–∑ –∫–æ–Ω–≤–µ—Ä—Å–∏–π!</b>\n\n{campaign_names}\n\n–ï—Å—Ç—å –∫–ª–∏–∫–∏, –Ω–æ –Ω–µ—Ç –ø—Ä–æ–¥–∞–∂. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–æ—Ä–æ–Ω–∫—É."
        })

    # ========================================
    # 4. –ü–û–î–ü–ò–°–ö–ò –ò –õ–û–Ø–õ–¨–ù–û–°–¢–¨
    # ========================================

    # –ò—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–∑–∞–≤—Ç—Ä–∞)
    cursor.execute("""
        SELECT COUNT(*) FROM user_subscriptions
        WHERE DATE(end_date) = DATE('now', '+1 day')
        AND status = 'active'
    """)
    expiring = cursor.fetchone()[0]
    if expiring > 0:
        alerts.append({
            'emoji': 'üíé',
            'message': f"<b>–ò—Å—Ç–µ–∫–∞—é—Ç –ø–æ–¥–ø–∏—Å–∫–∏!</b>\n\n{expiring} –ø–æ–¥–ø–∏—Å–æ–∫ –∏—Å—Ç–µ–∫–∞—é—Ç –∑–∞–≤—Ç—Ä–∞.\n\n–ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ —Å –±–æ–Ω—É—Å–æ–º."
        })

    # –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å –±–æ–Ω—É—Å–æ–≤ —É VIP-–∫–ª–∏–µ–Ω—Ç–æ–≤
    cursor.execute("""
        SELECT first_name, bonus_points FROM users
        WHERE user_id IN (
            SELECT user_id FROM user_subscriptions
            WHERE status = 'active'
        )
        AND bonus_points < 100
        LIMIT 5
    """)
    low_bonus_vips = cursor.fetchall()
    if low_bonus_vips:
        names = ", ".join([n[0] for n in low_bonus_vips])
        alerts.append({
            'emoji': 'üéÅ',
            'message': f"<b>VIP –±–µ–∑ –±–æ–Ω—É—Å–æ–≤!</b>\n\n{names}\n\n–ü–æ–¥–∞—Ä–∏—Ç–µ –±–æ–Ω—É—Å—ã –¥–ª—è —É–¥–µ—Ä–∂–∞–Ω–∏—è."
        })

    # ========================================
    # 5. –¢–ï–•–ù–ò–ß–ï–°–ö–ò–ï –ê–õ–ï–†–¢–´
    # ========================================

    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    cursor.execute("""
        SELECT COUNT(*) FROM notifications_log
        WHERE status = 'failed'
        AND sent_at >= DATE('now', '-1 day')
    """)
    failed_notif = cursor.fetchone()[0]
    if failed_notif > 10:
        alerts.append({
            'emoji': 'üîî',
            'message': f"<b>–ü—Ä–æ–±–ª–µ–º—ã —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏!</b>\n\n{failed_notif} –Ω–µ–æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞ –¥–µ–Ω—å.\n\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ Telegram Bot."
        })

    conn.close()

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∞–ª–µ—Ä—Ç—ã
    if alerts:
        for alert in alerts:
            await send_alert(alert['message'], alert['emoji'])
    else:
        print("‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–∏—Ç—É–∞—Ü–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

    return len(alerts)


async def send_hourly_summary():
    """–ö—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)"""

    conn = get_connection()
    cursor = conn.cursor()

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
    cursor.execute("""
        SELECT
            (SELECT COUNT(*) FROM users WHERE registration_date >= datetime('now', '-1 hour')) as new_users,
            (SELECT COUNT(*) FROM flower_orders WHERE created_at >= datetime('now', '-1 hour')) as new_orders,
            (SELECT COALESCE(SUM(total_amount), 0) FROM flower_orders
             WHERE created_at >= datetime('now', '-1 hour') AND status = 'completed') as revenue
    """)
    row = cursor.fetchone()

    if any(row):  # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∞—è-—Ç–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        message = f"""
üìä <b>–°–≤–æ–¥–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å</b>

üë• –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {row[0]}
üõí –ù–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {row[1]}
üí∞ –í—ã—Ä—É—á–∫–∞: {row[2]:,}‚ÇΩ
"""
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            parse_mode=ParseMode.HTML
        )

    conn.close()


async def check_business_opportunities():
    """–ü–æ–∏—Å–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –¥–ª—è —Ä–æ—Å—Ç–∞ –±–∏–∑–Ω–µ—Å–∞"""

    conn = get_connection()
    cursor = conn.cursor()

    opportunities = []

    # –ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –¥–∞–≤–Ω–æ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ (>30 –¥–Ω–µ–π)
    cursor.execute("""
        SELECT COUNT(DISTINCT u.user_id)
        FROM users u
        WHERE u.user_id NOT IN (
            SELECT user_id FROM flower_orders
            WHERE created_at >= DATE('now', '-30 days')
        )
        AND u.registration_date < DATE('now', '-30 days')
    """)
    inactive = cursor.fetchone()[0]
    if inactive > 10:
        opportunities.append(
            f"üí§ {inactive} –∫–ª–∏–µ–Ω—Ç–æ–≤ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª–∏ >30 –¥–Ω–µ–π\n"
            f"   –ó–∞–ø—É—Å—Ç–∏—Ç–µ win-back –∫–∞–º–ø–∞–Ω–∏—é —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º"
        )

    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è
    cursor.execute("""
        SELECT name FROM products
        WHERE stock_quantity < 5
        AND id IN (
            SELECT json_extract(value, '$.id')
            FROM flower_orders, json_each(items_json)
            WHERE created_at >= DATE('now', '-7 days')
            GROUP BY json_extract(value, '$.id')
            HAVING COUNT(*) > 5
        )
        LIMIT 3
    """)
    low_stock = cursor.fetchall()
    if low_stock:
        products = ", ".join([p[0] for p in low_stock])
        opportunities.append(
            f"üì¶ –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∑–∞–∫–∞–Ω—á–∏–≤–∞—é—Ç—Å—è: {products}\n"
            f"   –°—Ä–æ—á–Ω–æ –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –∑–∞–ø–∞—Å!"
        )

    # –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—É—é —É—Å–ª—É–≥—É
    cursor.execute("""
        SELECT s.name, COUNT(*) as cnt
        FROM salon_appointments sa
        JOIN services s ON sa.service_id = s.id
        WHERE sa.appointment_date >= DATE('now', '-7 days')
        GROUP BY s.name
        HAVING cnt > 20
        ORDER BY cnt DESC
        LIMIT 1
    """)
    row = cursor.fetchone()
    if row:
        opportunities.append(
            f"üî• –í—ã—Å–æ–∫–∏–π —Å–ø—Ä–æ—Å –Ω–∞ '{row[0]}' ({row[1]} –∑–∞–ø–∏—Å–µ–π/–Ω–µ–¥–µ–ª—é)\n"
            f"   –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø–æ–≤—ã—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –Ω–∞ 10-15%"
        )

    # –•–æ—Ä–æ—à–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è UTM-–∫–∞–º–ø–∞–Ω–∏–∏
    cursor.execute("""
        SELECT name, conversions, clicks
        FROM utm_campaigns
        WHERE clicks > 50
        AND (conversions * 1.0 / clicks) > 0.1
        ORDER BY (conversions * 1.0 / clicks) DESC
        LIMIT 1
    """)
    row = cursor.fetchone()
    if row:
        conv_rate = row[1] / row[2] * 100
        opportunities.append(
            f"üìà –û—Ç–ª–∏—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Å–∏—è —É '{row[0]}': {conv_rate:.1f}%\n"
            f"   –£–≤–µ–ª–∏—á—å—Ç–µ –±—é–¥–∂–µ—Ç —ç—Ç–æ–π –∫–∞–º–ø–∞–Ω–∏–∏"
        )

    conn.close()

    if opportunities:
        message = "üí° <b>–í–û–ó–ú–û–ñ–ù–û–°–¢–ò –î–õ–Ø –†–û–°–¢–ê</b>\n\n" + "\n\n".join(opportunities)
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=message,
            parse_mode=ParseMode.HTML
        )


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    asyncio.run(check_critical_alerts())


if __name__ == "__main__":
    main()
