"""
–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤.
–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã –∫–ª–∏–µ–Ω—Ç–∞–º —á–µ—Ä–µ–∑ –∑–∞–¥–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ—Å–ª–µ –∑–∞–∫–∞–∑–∞.
"""

import asyncio
import logging
from datetime import datetime
from telegram import Bot, InlineKeyboardMarkup, InlineKeyboardButton

from config import TELEGRAM_BOT_TOKEN
from database import (
    get_pending_feedback_requests, mark_feedback_request_sent,
    get_feedback_settings
)

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def send_feedback_requests():
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ –æ—Ç–∑—ã–≤—ã –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–æ—à–ª–æ –≤—Ä–µ–º—è.
    """
    try:
        settings = get_feedback_settings()

        if not settings['enabled']:
            logger.info("–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
            return

        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        pending_requests = get_pending_feedback_requests()

        if not pending_requests:
            logger.info("–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            return

        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(pending_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É")

        for request in pending_requests:
            try:
                user_id = request['user_id']
                order_type = request['order_type']
                order_id = request['order_id']
                user_name = request['user_name']

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                if order_type == 'appointment':
                    message_text = (
                        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! üëã\n\n"
                        f"–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å —É—Å–ª—É–≥–∞ –≤ –Ω–∞—à–µ–º —Å–∞–ª–æ–Ω–µ?\n\n"
                        f"{settings['message_template']}\n\n"
                        f"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíñ"
                    )
                else:  # flower_order
                    message_text = (
                        f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user_name}! üëã\n\n"
                        f"–ö–∞–∫ –≤–∞–º –ø–æ–Ω—Ä–∞–≤–∏–ª–∏—Å—å –Ω–∞—à–∏ —Ü–≤–µ—Ç—ã?\n\n"
                        f"{settings['message_template']}\n\n"
                        f"–í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å! üíñ"
                    )

                keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="write_review")],
                    [InlineKeyboardButton("üè† –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
                ])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id=user_id,
                    text=message_text,
                    reply_markup=keyboard
                )

                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π
                mark_feedback_request_sent(request['id'])

                logger.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç–∑—ã–≤–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} (–∑–∞–∫–∞–∑ {order_type}:{order_id})")

                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)

            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç–∑—ã–≤–∞ {request['id']}: {e}")
                continue

        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(pending_requests)} –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_feedback_requests: {e}")


async def run_scheduler():
    """
    –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å).
    """
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞–ø—É—â–µ–Ω")

    while True:
        try:
            current_hour = datetime.now().hour

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –≤ 10:00 –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            if current_hour == 10:
                await send_feedback_requests()
                # –ñ–¥–µ–º —á–∞—Å, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
                await asyncio.sleep(3600)
            else:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞—Å
                await asyncio.sleep(3600)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ run_scheduler: {e}")
            await asyncio.sleep(3600)


if __name__ == "__main__":
    asyncio.run(run_scheduler())
