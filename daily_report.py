"""
üìä –ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢ –î–õ–Ø –°–û–ë–°–¢–í–ï–ù–ù–ò–ö–ê
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –∞–Ω–∞–ª–∏—Ç–∏–∫–∏ –≤ Telegram
"""

import asyncio
from datetime import datetime, timedelta
from telegram import Bot
from telegram.constants import ParseMode
from config import TELEGRAM_BOT_TOKEN, ADMIN_ID
from database import get_connection

def get_daily_statistics():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –¥–µ–Ω—å"""

    conn = get_connection()
    cursor = conn.cursor()

    today = datetime.now().date()
    yesterday = today - timedelta(days=1)

    stats = {
        'date': today.strftime('%d.%m.%Y'),
        'users': {},
        'revenue': {},
        'orders': {},
        'salon': {},
        'marketing': {},
        'subscriptions': {},
        'bonuses': {},
        'top_performers': {}
    }

    # =====================================================
    # 1. –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò
    # =====================================================

    # –ù–æ–≤—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT COUNT(*) FROM users
        WHERE DATE(registration_date) = ?
    """, (today,))
    stats['users']['new_today'] = cursor.fetchone()[0]

    # –ù–æ–≤—ã–µ –∑–∞ –≤—á–µ—Ä–∞ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
    cursor.execute("""
        SELECT COUNT(*) FROM users
        WHERE DATE(registration_date) = ?
    """, (yesterday,))
    stats['users']['new_yesterday'] = cursor.fetchone()[0]

    # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    cursor.execute("SELECT COUNT(*) FROM users")
    stats['users']['total'] = cursor.fetchone()[0]

    # –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Å–æ–≤–µ—Ä—à–∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∑–∞ –¥–µ–Ω—å)
    cursor.execute("""
        SELECT COUNT(DISTINCT user_id) FROM (
            SELECT user_id FROM salon_appointments WHERE DATE(created_at) = ?
            UNION
            SELECT user_id FROM flower_orders WHERE DATE(created_at) = ?
            UNION
            SELECT user_id FROM loyalty_transactions WHERE DATE(created_at) = ?
        )
    """, (today, today, today))
    stats['users']['active_today'] = cursor.fetchone()[0]

    # =====================================================
    # 2. –í–´–†–£–ß–ö–ê
    # =====================================================

    # –í—ã—Ä—É—á–∫–∞ —Å–∞–ª–æ–Ω–∞ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT COALESCE(SUM(total_amount), 0)
        FROM salon_appointments
        WHERE DATE(appointment_date) = ? AND status IN ('completed', 'confirmed')
    """, (today,))
    stats['revenue']['salon_today'] = cursor.fetchone()[0]

    # –í—ã—Ä—É—á–∫–∞ —Å–∞–ª–æ–Ω–∞ –≤—á–µ—Ä–∞
    cursor.execute("""
        SELECT COALESCE(SUM(total_amount), 0)
        FROM salon_appointments
        WHERE DATE(appointment_date) = ? AND status IN ('completed', 'confirmed')
    """, (yesterday,))
    stats['revenue']['salon_yesterday'] = cursor.fetchone()[0]

    # –í—ã—Ä—É—á–∫–∞ —Ü–≤–µ—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT COALESCE(SUM(total_amount), 0)
        FROM flower_orders
        WHERE DATE(created_at) = ? AND status IN ('completed', 'paid')
    """, (today,))
    stats['revenue']['flowers_today'] = cursor.fetchone()[0]

    # –í—ã—Ä—É—á–∫–∞ —Ü–≤–µ—Ç–æ–≤ –≤—á–µ—Ä–∞
    cursor.execute("""
        SELECT COALESCE(SUM(total_amount), 0)
        FROM flower_orders
        WHERE DATE(created_at) = ? AND status IN ('completed', 'paid')
    """, (yesterday,))
    stats['revenue']['flowers_yesterday'] = cursor.fetchone()[0]

    # –í—ã—Ä—É—á–∫–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT COALESCE(SUM(amount), 0)
        FROM certificates
        WHERE DATE(created_at) = ? AND status = 'active'
    """, (today,))
    stats['revenue']['certificates_today'] = cursor.fetchone()[0]

    # –í—ã—Ä—É—á–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT COALESCE(SUM(payment_amount), 0)
        FROM user_subscriptions
        WHERE DATE(created_at) = ?
    """, (today,))
    stats['revenue']['subscriptions_today'] = cursor.fetchone()[0]

    # –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞
    stats['revenue']['total_today'] = (
        stats['revenue']['salon_today'] +
        stats['revenue']['flowers_today'] +
        stats['revenue']['certificates_today'] +
        stats['revenue']['subscriptions_today']
    )

    stats['revenue']['total_yesterday'] = (
        stats['revenue']['salon_yesterday'] +
        stats['revenue']['flowers_yesterday']
    )

    # =====================================================
    # 3. –ó–ê–ö–ê–ó–´
    # =====================================================

    # –ó–∞–∫–∞–∑—ã —Ü–≤–µ—Ç–æ–≤
    cursor.execute("""
        SELECT
            COUNT(*) as total,
            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
            SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled
        FROM flower_orders
        WHERE DATE(created_at) = ?
    """, (today,))
    row = cursor.fetchone()
    stats['orders']['flowers'] = {
        'total': row[0],
        'pending': row[1] or 0,
        'completed': row[2] or 0,
        'cancelled': row[3] or 0
    }

    # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Ü–≤–µ—Ç–æ–≤
    cursor.execute("""
        SELECT AVG(total_amount)
        FROM flower_orders
        WHERE DATE(created_at) = ? AND status = 'completed'
    """, (today,))
    stats['orders']['avg_flower_order'] = cursor.fetchone()[0] or 0

    # =====================================================
    # 4. –°–ê–õ–û–ù –ö–†–ê–°–û–¢–´
    # =====================================================

    # –ó–∞–ø–∏—Å–∏ –≤ —Å–∞–ª–æ–Ω
    cursor.execute("""
        SELECT
            COUNT(*) as total,
            SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
            SUM(CASE WHEN status = 'confirmed' THEN 1 ELSE 0 END) as confirmed,
            SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END) as completed,
            SUM(CASE WHEN status = 'cancelled' THEN 1 ELSE 0 END) as cancelled
        FROM salon_appointments
        WHERE DATE(appointment_date) = ?
    """, (today,))
    row = cursor.fetchone()
    stats['salon']['appointments'] = {
        'total': row[0],
        'pending': row[1] or 0,
        'confirmed': row[2] or 0,
        'completed': row[3] or 0,
        'cancelled': row[4] or 0
    }

    # –°—Ä–µ–¥–Ω–∏–π —á–µ–∫ —Å–∞–ª–æ–Ω–∞
    cursor.execute("""
        SELECT AVG(total_amount)
        FROM salon_appointments
        WHERE DATE(appointment_date) = ? AND status = 'completed'
    """, (today,))
    stats['salon']['avg_check'] = cursor.fetchone()[0] or 0

    # –¢–æ–ø —É—Å–ª—É–≥–∏ –¥–Ω—è
    cursor.execute("""
        SELECT s.name, COUNT(*) as cnt
        FROM salon_appointments sa
        JOIN services s ON sa.service_id = s.id
        WHERE DATE(sa.appointment_date) = ?
        GROUP BY s.name
        ORDER BY cnt DESC
        LIMIT 3
    """, (today,))
    stats['salon']['top_services'] = cursor.fetchall()

    # –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å (% –∑–∞–Ω—è—Ç—ã—Ö —Å–ª–æ—Ç–æ–≤)
    cursor.execute("""
        SELECT COUNT(*) FROM salon_appointments
        WHERE DATE(appointment_date) = ? AND status != 'cancelled'
    """, (today,))
    booked_slots = cursor.fetchone()[0]
    total_slots = 12 * 8  # 12 —á–∞—Å–æ–≤ —Ä–∞–±–æ—Ç—ã * 8 —Å–ª–æ—Ç–æ–≤ –≤ —á–∞—Å (–ø—Ä–∏–º–µ—Ä–Ω–æ)
    stats['salon']['occupancy'] = (booked_slots / total_slots * 100) if total_slots > 0 else 0

    # =====================================================
    # 5. –ú–ê–†–ö–ï–¢–ò–ù–ì
    # =====================================================

    # UTM-–∫–∞–º–ø–∞–Ω–∏–∏
    cursor.execute("""
        SELECT
            utm_source,
            COUNT(DISTINCT user_id) as registrations,
            SUM(conversions) as conversions,
            SUM(conversion_amount) as revenue
        FROM user_utm_tracking
        WHERE DATE(first_visit) = ?
        GROUP BY utm_source
        ORDER BY conversions DESC
        LIMIT 5
    """, (today,))
    stats['marketing']['utm_sources'] = cursor.fetchall()

    # –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT COUNT(*) FROM users
        WHERE DATE(registration_date) = ? AND referred_by IS NOT NULL
    """, (today,))
    stats['marketing']['referral_signups'] = cursor.fetchone()[0]

    # –ù–∞—á–∏—Å–ª–µ–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤
    cursor.execute("""
        SELECT COALESCE(SUM(points), 0)
        FROM loyalty_transactions
        WHERE DATE(created_at) = ?
        AND description LIKE '%–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è%'
    """, (today,))
    stats['marketing']['referral_bonuses'] = cursor.fetchone()[0]

    # =====================================================
    # 6. –ü–û–î–ü–ò–°–ö–ò
    # =====================================================

    # –ù–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT sp.name, COUNT(*) as cnt
        FROM user_subscriptions us
        JOIN subscription_plans sp ON us.plan_id = sp.id
        WHERE DATE(us.created_at) = ?
        GROUP BY sp.name
    """, (today,))
    stats['subscriptions']['new_today'] = cursor.fetchall()

    # –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
    cursor.execute("""
        SELECT COUNT(*) FROM user_subscriptions
        WHERE status = 'active' AND end_date >= ?
    """, (today,))
    stats['subscriptions']['active_total'] = cursor.fetchone()[0]

    # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–æ–∫ —Å–µ–≥–æ–¥–Ω—è
    cursor.execute("""
        SELECT
            SUM(CASE WHEN type = 'flower' THEN 1 ELSE 0 END) as flowers_used,
            SUM(CASE WHEN type = 'service' THEN 1 ELSE 0 END) as services_used
        FROM subscription_usage
        WHERE DATE(used_at) = ?
    """, (today,))
    row = cursor.fetchone()
    stats['subscriptions']['usage_today'] = {
        'flowers': row[0] or 0,
        'services': row[1] or 0
    }

    # =====================================================
    # 7. –ë–û–ù–£–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê
    # =====================================================

    # –ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤
    cursor.execute("""
        SELECT COALESCE(SUM(points), 0)
        FROM loyalty_transactions
        WHERE DATE(created_at) = ? AND points > 0
    """, (today,))
    stats['bonuses']['earned_today'] = cursor.fetchone()[0]

    # –ü–æ—Ç—Ä–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤
    cursor.execute("""
        SELECT COALESCE(SUM(ABS(points)), 0)
        FROM loyalty_transactions
        WHERE DATE(created_at) = ? AND points < 0
    """, (today,))
    stats['bonuses']['spent_today'] = cursor.fetchone()[0]

    # –°—É–º–º–∞ –æ–ø–ª–∞—á–µ–Ω–Ω–∞—è –±–æ–Ω—É—Å–∞–º–∏
    cursor.execute("""
        SELECT COALESCE(SUM(bonus_used), 0)
        FROM (
            SELECT bonus_used FROM salon_appointments WHERE DATE(appointment_date) = ?
            UNION ALL
            SELECT bonus_used FROM flower_orders WHERE DATE(created_at) = ?
        )
    """, (today, today))
    stats['bonuses']['paid_with_bonuses'] = cursor.fetchone()[0]

    # =====================================================
    # 8. –¢–û–ü –ò–°–ü–û–õ–ù–ò–¢–ï–õ–ò
    # =====================================================

    # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç—ã –ø–æ –≤—ã—Ä—É—á–∫–µ –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT
            u.first_name,
            u.user_id,
            SUM(total) as revenue
        FROM (
            SELECT user_id, total_amount as total
            FROM salon_appointments
            WHERE DATE(appointment_date) = ? AND status = 'completed'
            UNION ALL
            SELECT user_id, total_amount as total
            FROM flower_orders
            WHERE DATE(created_at) = ? AND status = 'completed'
        ) as orders
        JOIN users u ON orders.user_id = u.user_id
        GROUP BY u.user_id, u.first_name
        ORDER BY revenue DESC
        LIMIT 5
    """, (today, today))
    stats['top_performers']['clients'] = cursor.fetchall()

    # –¢–æ–ø —Ç–æ–≤–∞—Ä—ã –∑–∞ –¥–µ–Ω—å
    cursor.execute("""
        SELECT
            p.name,
            COUNT(*) as quantity,
            SUM(p.price * quantity) as revenue
        FROM flower_orders fo
        CROSS JOIN json_each(fo.items_json) as item
        JOIN products p ON json_extract(item.value, '$.id') = p.id
        WHERE DATE(fo.created_at) = ?
        GROUP BY p.name
        ORDER BY revenue DESC
        LIMIT 5
    """, (today,))
    stats['top_performers']['products'] = cursor.fetchall()

    conn.close()
    return stats


def format_daily_report(stats):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""

    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    user_change = stats['users']['new_today'] - stats['users']['new_yesterday']
    user_emoji = "üìà" if user_change > 0 else "üìâ" if user_change < 0 else "‚û°Ô∏è"

    revenue_change = stats['revenue']['total_today'] - stats['revenue']['total_yesterday']
    revenue_emoji = "üìà" if revenue_change > 0 else "üìâ" if revenue_change < 0 else "‚û°Ô∏è"
    revenue_percent = (revenue_change / stats['revenue']['total_yesterday'] * 100) if stats['revenue']['total_yesterday'] > 0 else 0

    report = f"""
üìä <b>–ï–ñ–ï–î–ù–ï–í–ù–´–ô –û–¢–ß–ï–¢</b>
üìÖ {stats['date']}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí∞ <b>–í–´–†–£–ß–ö–ê –ó–ê –î–ï–ù–¨</b>
‚î£ –û–±—â–∞—è: <b>{stats['revenue']['total_today']:,}‚ÇΩ</b> {revenue_emoji} {revenue_change:+,}‚ÇΩ ({revenue_percent:+.1f}%)
‚î£ –°–∞–ª–æ–Ω: {stats['revenue']['salon_today']:,}‚ÇΩ
‚î£ –¶–≤–µ—Ç—ã: {stats['revenue']['flowers_today']:,}‚ÇΩ
‚î£ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã: {stats['revenue']['certificates_today']:,}‚ÇΩ
‚îó –ü–æ–¥–ø–∏—Å–∫–∏: {stats['revenue']['subscriptions_today']:,}‚ÇΩ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üë• <b>–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò</b>
‚î£ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: <b>{stats['users']['new_today']}</b> {user_emoji} {user_change:+d}
‚î£ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['users']['active_today']}
‚îó –í—Å–µ–≥–æ: {stats['users']['total']:,}

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíá‚Äç‚ôÄÔ∏è <b>–°–ê–õ–û–ù –ö–†–ê–°–û–¢–´</b>
‚î£ –ó–∞–ø–∏—Å–µ–π: {stats['salon']['appointments']['total']}
   ‚îú ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['salon']['appointments']['completed']}
   ‚îú ‚è≥ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {stats['salon']['appointments']['confirmed']}
   ‚îú üïê –í –æ–∂–∏–¥–∞–Ω–∏–∏: {stats['salon']['appointments']['pending']}
   ‚îî ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['salon']['appointments']['cancelled']}
‚î£ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['salon']['avg_check']:,.0f}‚ÇΩ
‚îó –ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {stats['salon']['occupancy']:.1f}%

<b>–¢–æ–ø —É—Å–ª—É–≥–∏:</b>
"""

    for idx, (service, count) in enumerate(stats['salon']['top_services'], 1):
        report += f"   {idx}. {service} ‚Äî {count} —Ä–∞–∑\n"

    report += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíê <b>–¶–í–ï–¢–û–ß–ù–´–ô –ú–ê–ì–ê–ó–ò–ù</b>
‚î£ –ó–∞–∫–∞–∑–æ–≤: {stats['orders']['flowers']['total']}
   ‚îú ‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['orders']['flowers']['completed']}
   ‚îú üïê –í –æ–±—Ä–∞–±–æ—Ç–∫–µ: {stats['orders']['flowers']['pending']}
   ‚îî ‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['orders']['flowers']['cancelled']}
‚îó –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {stats['orders']['avg_flower_order']:,.0f}‚ÇΩ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üíé <b>–ü–û–î–ü–ò–°–ö–ò</b>
‚î£ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['subscriptions']['active_total']}
‚î£ –ù–æ–≤—ã—Ö –∑–∞ –¥–µ–Ω—å: {len(stats['subscriptions']['new_today'])}
‚îó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è:
   ‚îú üåπ –ë—É–∫–µ—Ç–æ–≤: {stats['subscriptions']['usage_today']['flowers']}
   ‚îî üíÖ –£—Å–ª—É–≥: {stats['subscriptions']['usage_today']['services']}

"""

    if stats['subscriptions']['new_today']:
        report += "<b>–ö—É–ø–ª–µ–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"
        for plan, count in stats['subscriptions']['new_today']:
            report += f"   ‚Ä¢ {plan} ‚Äî {count} —à—Ç\n"
        report += "\n"

    report += f"""‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üéÅ <b>–ë–û–ù–£–°–ù–ê–Ø –°–ò–°–¢–ï–ú–ê</b>
‚î£ –ù–∞—á–∏—Å–ª–µ–Ω–æ: +{stats['bonuses']['earned_today']:,} –±–∞–ª–ª–æ–≤
‚î£ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: -{stats['bonuses']['spent_today']:,} –±–∞–ª–ª–æ–≤
‚îó –û–ø–ª–∞—á–µ–Ω–æ –±–æ–Ω—É—Å–∞–º–∏: {stats['bonuses']['paid_with_bonuses']:,}‚ÇΩ

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üì¢ <b>–ú–ê–†–ö–ï–¢–ò–ù–ì</b>
‚î£ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ: {stats['marketing']['referral_signups']}
‚îó –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã—Ö –±–æ–Ω—É—Å–æ–≤ –≤—ã–¥–∞–Ω–æ: {stats['marketing']['referral_bonuses']:,}

"""

    if stats['marketing']['utm_sources']:
        report += "<b>–¢–æ–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∏ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>\n"
        for source, regs, convs, rev in stats['marketing']['utm_sources']:
            report += f"   ‚Ä¢ {source}: {regs} —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π, {convs} –∫–æ–Ω–≤–µ—Ä—Å–∏–π, {rev:,}‚ÇΩ\n"
        report += "\n"

    report += """‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üèÜ <b>–¢–û–ü –ö–õ–ò–ï–ù–¢–´ –î–ù–Ø</b>
"""

    if stats['top_performers']['clients']:
        for idx, (name, user_id, revenue) in enumerate(stats['top_performers']['clients'], 1):
            report += f"   {idx}. {name} ‚Äî {revenue:,}‚ÇΩ\n"
    else:
        report += "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    report += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üì¶ <b>–¢–û–ü –¢–û–í–ê–†–´ –î–ù–Ø</b>
"""

    if stats['top_performers']['products']:
        for idx, (product, qty, revenue) in enumerate(stats['top_performers']['products'], 1):
            report += f"   {idx}. {product} ‚Äî {qty} —à—Ç, {revenue:,}‚ÇΩ\n"
    else:
        report += "   –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"

    report += """
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üí° <b>–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:</b>
"""

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations = []

    if stats['salon']['occupancy'] < 50:
        recommendations.append("‚ö†Ô∏è –ù–∏–∑–∫–∞—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å —Å–∞–ª–æ–Ω–∞ (<50%). –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –ø—Ä–æ–º–æ-–∞–∫—Ü–∏—é.")

    if stats['orders']['flowers']['cancelled'] > stats['orders']['flowers']['completed']:
        recommendations.append("‚ö†Ô∏è –ú–Ω–æ–≥–æ –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ —Ü–≤–µ—Ç–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è.")

    if revenue_change < 0 and abs(revenue_percent) > 20:
        recommendations.append(f"üìâ –í—ã—Ä—É—á–∫–∞ —É–ø–∞–ª–∞ –Ω–∞ {abs(revenue_percent):.0f}%. –ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥.")

    if stats['users']['new_today'] == 0:
        recommendations.append("‚ö†Ô∏è –°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –Ω–æ–≤—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∫–ª–∞–º—É.")

    if stats['bonuses']['spent_today'] > stats['bonuses']['earned_today']:
        recommendations.append("üí∏ –ë–æ–ª—å—à–µ —Ç—Ä–∞—Ç—è—Ç –±–æ–Ω—É—Å–æ–≤, —á–µ–º –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç. –£—Å–∫–æ—Ä—å—Ç–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è.")

    if stats['subscriptions']['active_total'] < 10:
        recommendations.append("üíé –ú–∞–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫. –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —É—Å–ª–æ–≤–∏—è.")

    if not recommendations:
        recommendations.append("‚úÖ –í—Å–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –≤ –Ω–æ—Ä–º–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ.")

    for rec in recommendations:
        report += f"   {rec}\n"

    report += f"""
‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

üïê –û—Ç—á–µ—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω: {datetime.now().strftime('%H:%M')}
"""

    return report


async def send_daily_report():
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫—É"""

    try:
        # –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = get_daily_statistics()

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç
        report = format_daily_report(stats)

        # –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ Telegram
        bot = Bot(token=TELEGRAM_BOT_TOKEN)
        await bot.send_message(
            chat_id=ADMIN_ID,
            text=report,
            parse_mode=ParseMode.HTML
        )

        print(f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –≤ {datetime.now().strftime('%H:%M')}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞"""
    asyncio.run(send_daily_report())


if __name__ == "__main__":
    main()
